
 /* Pokemon.cpp
 
 This program written from 03/07/2009 - 06/26/2009.

 This is an exercise in programming undertaken solely for the purpose of fun.  
 All things related to Pokemon are the property of Nintendo, Inc.  */
 
 #include<iostream>
 #include<cmath>
 #include<cstdlib>
 #include<string>
 #include<fstream>
 
 using namespace std;
 
 // Declare global variables.
 
 // The player's name and status.
 string Name;
 int Status=0;
 const string Statuses[3]={"Pokemon Trainer","Rocket Grunt","Rocket Boss"};
 
 // The player's badges, basic menu options, whether or not player can "Surf" or "Fly" and whether the player has defeated the Elite Four.
 bool Options[10]={1,1,1,1,1,1,1,1,0,0}, Surf=0, Fly=0, Dungeon=0;
 
 // The indices matrix, the player's active Pokemon's number, the opponent's active Pokemon's number, number of turns that have passed, the number of Pokemon the player has, the player's current location, the last city the player visited, the player's menu choice.
 int Badges[8]={0,0,0,0,0,0,0,0}, Indices[6]={5,4,3,2,1,0}, Turns=0, Number_Pokemon=0, Current_Location=1, Menu_Choice=-1, Winner;
 
 // The active Pokemon's information.
 double Player_Active[34], Opponent_Active[34];
 
 // Misc battling variables.
 int n, player_count, opponent_count=0, attack;
 double damage, self_damage, damage_ratio, self_damage_ratio;
 
 // The names of all the Pokemon, in order.
 const string Pokemon_Names[151]={"Ash's Pikachu",
                                  "Bulbasaur",
                                  "Ivysaur",
                                  "Venusaur",
                                  "Charmander",
                                  "Charmeleon",
                                  "Charizard",
                                  "Squirtle",
                                  "Wartortle",
                                  "Blastoise",
                                  "Caterpie",
                                  "Metapod",
                                  "Butterfree",
                                  "Weedle",
                                  "Kakuna",
                                  "Beedrill",
                                  "Pidgey",
                                  "Pidgeotto",
                                  "Pidgeot",
                                  "Rattata",
                                  "Raticate",
                                  "Spearow",
                                  "Fearow",
                                  "Ekans",
                                  "Arbok",
                                  "Pikachu",
                                  "Raichu",
                                  "Sandshrew",
                                  "Sandslash",
                                  "Nidoran(F)",
                                  "Nidorina",
                                  "Nidoqueen",
                                  "Nidoran(M)",
                                  "Nidorino",
                                  "Nidoking",
                                  "Clefairy",
                                  "Clefable",
                                  "Vulpix",
                                  "Ninetales",
                                  "Jigglypuff",
                                  "Wigglytuff",
                                  "Zubat",
                                  "Golbat",
                                  "Oddish",
                                  "Gloom",
                                  "Vileplume",
                                  "Paras",
                                  "Parasect",
                                  "Venonat",
                                  "Venomoth",
                                  "Diglett",
                                  "Dugtrio",
                                  "Meowth",
                                  "Persian",
                                  "Psyduck",
                                  "Golduck",
                                  "Mankey",
                                  "Primeape",
                                  "Growlithe",
                                  "Arcanine",
                                  "Poliwag",
                                  "Poliwhirl",
                                  "Poliwrath",
                                  "Abra",
                                  "Kadabra",
                                  "Alakazam",
                                  "Machop",
                                  "Machoke",
                                  "Machamp",
                                  "Bellsprout",
                                  "Weepinbell",
                                  "Victreebel",
                                  "Tentacool",
                                  "Tentacruel",
                                  "Geodude",
                                  "Graveler",
                                  "Golem",
                                  "Ponyta",
                                  "Rapidash",
                                  "Slowpoke",
                                  "Slowbro",
                                  "Magnemite",
                                  "Magneton",
                                  "Farfetch'd",
                                  "Doduo",
                                  "Dodrio",
                                  "Seel",
                                  "Dewgong",
                                  "Grimer",
                                  "Muk",
                                  "Shellder",
                                  "Cloyster",
                                  "Gastly",
                                  "Haunter",
                                  "Gengar",
                                  "Onix",
                                  "Drowzee",
                                  "Hypno",
                                  "Krabby",
                                  "Kingler",
                                  "Voltorb",
                                  "Electrode",
                                  "Exeggcute",
                                  "Exeggutor",
                                  "Cubone",
                                  "Marowak",
                                  "Hitmonlee",
                                  "Hitmonchan",
                                  "Lickitung",
                                  "Koffing",
                                  "Weezing",
                                  "Rhyhorn",
                                  "Rhydon",
                                  "Chansey",
                                  "Tangela",
                                  "Kangaskhan",
                                  "Horsea",
                                  "Seadra",
                                  "Goldeen",
                                  "Seaking",
                                  "Staryu",
                                  "Starmie",
                                  "Mr. Mime",
                                  "Scyther",
                                  "Jynx",
                                  "Electabuzz",
                                  "Magmar",
                                  "Pinsir",
                                  "Tauros",
                                  "Magikarp",
                                  "Gyarados",
                                  "Lapras",
                                  "Ditto",
                                  "Eevee",
                                  "Vaporeon",
                                  "Jolteon",
                                  "Flareon",
                                  "Porygon",
                                  "Omanyte",
                                  "Omastar",
                                  "Kabuto",
                                  "Kabutops",
                                  "Aerodactyl",
                                  "Snorlax",
                                  "Articuno",
                                  "Zapdos",
                                  "Moltres",
                                  "Dratini",
                                  "Dragonair",
                                  "Dragonite",
                                  "Mewtwo"};
                                  
 // The numerical data for all the Pokemon, in the following order:
 // Number, Type 1, Type 2, Level, Evolution Level, Experience, Level-Up Experience, Base HP, Total HP, Current HP, Base Attack, Attack, Base Defense, Defense, Technique #1, Level for Technique #1, ..., Technique #10, Level for Technique #10.
 const double Pokemon[151][34]={{0,	17,	16,	0,	0,	0,	0,	70,	0,	0,	110,	0,	60,	0,	95,	0,	62,	11,	76,	20,	88,	26,	94,	30,	93,	35,	92,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {1,	8,	12,	0,	16,	0,	0,	45,	0,	0,	49,	0,	49,	0,	89,	0,	1,	7,	100,	13,	51,	20,	19,	25,	64,	30,	6,	32,	56,	36,	80,	40,	42,	50},
                                {2,	8,	12,	0,	32,	0,	0,	60,	0,	0,	62,	0,	63,	0,	89,	0,	1,	7,	100,	13,	51,	20,	19,	25,	64,	30,	6,	32,	56,	36,	80,	40,	42,	50},
                                {3,	8,	12,	0,	0,	0,	0,	80,	0,	0,	82,	0,	83,	0,	89,	0,	1,	7,	100,	13,	51,	20,	19,	25,	64,	30,	6,	32,	56,	36,	80,	40,	42,	50},
                                {4,	5,	16,	0,	16,	0,	0,	39,	0,	0,	52,	0,	43,	0,	70,	0,	32,	7,	28,	13,	19,	20,	77,	25,	33,	32,	34,	36,	24,	38,	30,	40,	42,	50},
                                {5,	5,	16,	0,	36,	0,	0,	58,	0,	0,	64,	0,	58,	0,	70,	0,	32,	7,	28,	13,	19,	20,	77,	25,	33,	32,	34,	36,	24,	38,	30,	40,	42,	50},
                                {6,	5,	6,	0,	0,	0,	0,	78,	0,	0,	84,	0,	78,	0,	70,	0,	32,	7,	28,	13,	19,	20,	77,	25,	33,	32,	34,	36,	24,	38,	30,	40,	42,	50},
                                {7,	15,	16,	0,	16,	0,	0,	44,	0,	0,	48,	0,	65,	0,	89,	0,	11,	7,	101,	13,	6,	20,	12,	25,	44,	30,	74,	32,	87,	36,	41,	40,	7,	50},
                                {8,	15,	16,	0,	36,	0,	0,	59,	0,	0,	63,	0,	80,	0,	89,	0,	11,	7,	101,	13,	6,	20,	12,	25,	44,	30,	74,	32,	87,	36,	41,	40,	7,	50},
                                {9,	15,	16,	0,	0,	0,	0,	79,	0,	0,	83,	0,	100,	0,	89,	0,	11,	7,	101,	13,	6,	20,	12,	25,	44,	30,	74,	32,	87,	36,	41,	40,	7,	50},
                                {10,	1,	16,	0,	7,	0,	0,	45,	0,	0,	30,	0,	35,	0,	89,	0,	1,	10,	48,	13,	37,	17,	15,	20,	88,	25,	51,	27,	60,	30,	66,	35,	61,	40},
                                {11,	1,	16,	0,	10,	0,	0,	50,	0,	0,	20,	0,	55,	0,	89,	0,	1,	10,	48,	13,	37,	17,	15,	20,	88,	25,	51,	27,	60,	30,	66,	35,	61,	40},
                                {12,	1,	6,	0,	0,	0,	0,	60,	0,	0,	45,	0,	50,	0,	89,	0,	1,	10,	48,	13,	37,	17,	15,	20,	88,	25,	51,	27,	60,	30,	66,	35,	61,	40},
                                {13,	1,	12,	0,	7,	0,	0,	40,	0,	0,	35,	0,	30,	0,	58,	0,	35,	10,	36,	13,	62,	15,	98,	17,	19,	20,	63,	23,	6,	30,	88,	33,	57,	40},
                                {14,	1,	12,	0,	10,	0,	0,	45,	0,	0,	25,	0,	50,	0,	58,	0,	35,	10,	36,	13,	62,	15,	98,	17,	19,	20,	63,	23,	6,	30,	88,	33,	57,	40},
                                {15,	1,	6,	0,	0,	0,	0,	65,	0,	0,	80,	0,	40,	0,	58,	0,	35,	10,	36,	13,	62,	15,	98,	17,	19,	20,	63,	23,	6,	30,	88,	33,	57,	40},
                                {16,	6,	11,	0,	18,	0,	0,	40,	0,	0,	45,	0,	40,	0,	37,	0,	35,	7,	55,	10,	62,	12,	88,	18,	102,	25,	25,	30,	65,	33,	34,	36,	75,	50},
                                {17,	6,	11,	0,	36,	0,	0,	63,	0,	0,	60,	0,	55,	0,	37,	0,	35,	7,	55,	10,	62,	12,	88,	18,	102,	25,	25,	30,	65,	33,	34,	36,	75,	50},
                                {18,	6,	11,	0,	0,	0,	0,	83,	0,	0,	80,	0,	75,	0,	37,	0,	35,	7,	55,	10,	62,	12,	88,	18,	102,	25,	25,	30,	65,	33,	34,	36,	75,	50},
                                {19,	11,	16,	0,	25,	0,	0,	30,	0,	0,	56,	0,	35,	0,	89,	0,	62,	12,	6,	18,	43,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {20,	11,	16,	0,	0,	0,	0,	55,	0,	0,	81,	0,	60,	0,	89,	0,	62,	12,	6,	18,	43,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {21,	6,	16,	0,	25,	0,	0,	40,	0,	0,	60,	0,	30,	0,	55,	0,	35,	0,	37,	10,	63,	18,	102,	25,	65,	30,	25,	35,	34,	36,	75,	45,	9E+99,	9E+99},
                                {22,	6,	16,	0,	0,	0,	0,	65,	0,	0,	90,	0,	65,	0,	55,	0,	35,	0,	37,	10,	63,	18,	102,	25,	65,	30,	25,	35,	34,	36,	75,	45,	9E+99,	9E+99},
                                {23,	12,	16,	0,	25,	0,	0,	35,	0,	0,	60,	0,	44,	0,	16,	0,	5,	5,	58,	10,	89,	15,	36,	17,	2,	20,	6,	25,	20,	30,	43,	40,	9E+99,	9E+99},
                                {24,	12,	16,	0,	0,	0,	0,	60,	0,	0,	85,	0,	69,	0,	16,	0,	5,	5,	58,	10,	89,	15,	36,	17,	2,	20,	6,	25,	20,	30,	43,	40,	9E+99,	9E+99},
                                {25,	3,	16,	0,	36,	0,	0,	35,	0,	0,	55,	0,	30,	0,	95,	0,	62,	11,	76,	20,	88,	26,	94,	30,	93,	35,	92,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {26,	3,	16,	0,	0,	0,	0,	60,	0,	0,	90,	0,	55,	0,	95,	0,	62,	11,	76,	20,	88,	26,	94,	30,	93,	35,	92,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {27,	9,	16,	0,	23,	0,	0,	50,	0,	0,	75,	0,	85,	0,	70,	0,	58,	5,	36,	10,	88,	25,	77,	30,	20,	33,	26,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {28,	9,	16,	0,	0,	0,	0,	75,	0,	0,	100,	0,	110,	0,	70,	0,	58,	5,	36,	10,	88,	25,	77,	30,	20,	33,	26,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {29,	12,	16,	0,	16,	0,	0,	55,	0,	0,	47,	0,	52,	0,	89,	0,	58,	5,	36,	8,	70,	10,	22,	15,	6,	20,	8,	36,	26,	40,	91,	45,	90,	50},
                                {30,	12,	16,	0,	32,	0,	0,	70,	0,	0,	62,	0,	67,	0,	89,	0,	58,	5,	36,	8,	70,	10,	22,	15,	6,	20,	8,	36,	26,	40,	91,	45,	90,	50},
                                {31,	12,	9,	0,	0,	0,	0,	90,	0,	0,	82,	0,	87,	0,	89,	0,	58,	5,	36,	8,	70,	10,	22,	15,	6,	20,	8,	36,	26,	40,	91,	45,	90,	50},
                                {32,	12,	16,	0,	16,	0,	0,	46,	0,	0,	57,	0,	40,	0,	89,	0,	58,	5,	35,	8,	22,	10,	40,	18,	91,	23,	8,	27,	77,	30,	83,	35,	26,	40},
                                {33,	12,	16,	0,	36,	0,	0,	61,	0,	0,	72,	0,	57,	0,	89,	0,	58,	5,	35,	8,	22,	10,	40,	18,	91,	23,	8,	27,	77,	30,	83,	35,	26,	40},
                                {34,	12,	9,	0,	0,	0,	0,	81,	0,	0,	92,	0,	77,	0,	89,	0,	58,	5,	35,	8,	22,	10,	40,	18,	91,	23,	8,	27,	77,	30,	83,	35,	26,	40},
                                {35,	11,	16,	0,	32,	0,	0,	70,	0,	0,	45,	0,	48,	0,	59,	0,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {36,	11,	16,	0,	0,	0,	0,	95,	0,	0,	70,	0,	73,	0,	59,	0,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {37,	5,	16,	0,	32,	0,	0,	38,	0,	0,	41,	0,	40,	0,	32,	0,	62,	7,	28,	13,	33,	20,	30,	38,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {38,	5,	16,	0,	0,	0,	0,	73,	0,	0,	76,	0,	75,	0,	32,	0,	62,	7,	28,	13,	33,	20,	30,	38,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {39,	11,	16,	0,	25,	0,	0,	115,	0,	0,	45,	0,	20,	0,	59,	0,	8,	20,	23,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {40,	11,	16,	0,	0,	0,	0,	140,	0,	0,	70,	0,	45,	0,	59,	0,	8,	20,	23,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {41,	12,	6,	0,	18,	0,	0,	40,	0,	0,	45,	0,	35,	0,	48,	0,	102,	18,	6,	25,	43,	38,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {42,	12,	6,	0,	0,	0,	0,	75,	0,	0,	80,	0,	70,	0,	48,	0,	102,	18,	6,	25,	43,	38,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {43,	8,	12,	0,	16,	0,	0,	45,	0,	0,	50,	0,	55,	0,	1,	0,	2,	10,	51,	18,	56,	26,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {44,	8,	12,	0,	36,	0,	0,	60,	0,	0,	65,	0,	70,	0,	1,	0,	2,	10,	51,	18,	56,	26,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {45,	8,	12,	0,	0,	0,	0,	75,	0,	0,	80,	0,	85,	0,	1,	0,	2,	10,	51,	18,	56,	26,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {46,	1,	12,	0,	18,	0,	0,	35,	0,	0,	70,	0,	55,	0,	70,	0,	48,	7,	77,	17,	51,	25,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {47,	1,	12,	0,	0,	0,	0,	60,	0,	0,	95,	0,	80,	0,	70,	0,	48,	7,	77,	17,	51,	25,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {48,	1,	12,	0,	18,	0,	0,	60,	0,	0,	55,	0,	50,	0,	89,	0,	48,	0,	15,	10,	60,	20,	61,	28,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {49,	1,	12,	0,	0,	0,	0,	70,	0,	0,	65,	0,	60,	0,	89,	0,	48,	0,	15,	10,	60,	20,	61,	28,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {50,	9,	16,	0,	18,	0,	0,	10,	0,	0,	55,	0,	25,	0,	70,	0,	20,	12,	77,	18,	26,	26,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {51,	9,	16,	0,	0,	0,	0,	35,	0,	0,	80,	0,	50,	0,	70,	0,	20,	12,	77,	18,	26,	26,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {52,	11,	16,	0,	18,	0,	0,	40,	0,	0,	45,	0,	35,	0,	70,	0,	36,	9,	6,	15,	77,	23,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {53,	11,	16,	0,	0,	0,	0,	65,	0,	0,	70,	0,	60,	0,	70,	0,	36,	9,	6,	15,	77,	23,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {54,	15,	16,	0,	25,	0,	0,	50,	0,	0,	52,	0,	48,	0,	70,	0,	36,	9,	15,	15,	6,	18,	61,	29,	41,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {55,	15,	13,	0,	0,	0,	0,	80,	0,	0,	82,	0,	78,	0,	70,	0,	36,	9,	15,	15,	6,	18,	61,	29,	41,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {56,	4,	16,	0,	25,	0,	0,	40,	0,	0,	80,	0,	35,	0,	70,	0,	36,	9,	47,	13,	63,	18,	50,	23,	71,	28,	77,	30,	84,	33,	86,	36,	91,	40},
                                {57,	4,	16,	0,	0,	0,	0,	65,	0,	0,	105,	0,	60,	0,	70,	0,	36,	9,	47,	13,	63,	18,	50,	23,	71,	28,	77,	30,	84,	33,	86,	36,	91,	40},
                                {58,	5,	16,	0,	36,	0,	0,	55,	0,	0,	70,	0,	45,	0,	6,	0,	32,	0,	28,	10,	90,	18,	33,	29,	30,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {59,	5,	16,	0,	0,	0,	0,	90,	0,	0,	110,	0,	80,	0,	6,	0,	32,	0,	28,	10,	90,	18,	33,	29,	30,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {60,	15,	16,	0,	16,	0,	0,	40,	0,	0,	50,	0,	40,	0,	11,	0,	101,	10,	12,	20,	8,	30,	41,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {61,	15,	16,	0,	32,	0,	0,	65,	0,	0,	65,	0,	65,	0,	11,	0,	101,	10,	12,	20,	8,	30,	41,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {62,	15,	4,	0,	0,	0,	0,	90,	0,	0,	85,	0,	95,	0,	11,	0,	101,	10,	12,	20,	8,	30,	41,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {63,	13,	16,	0,	16,	0,	0,	25,	0,	0,	20,	0,	15,	0,	15,	0,	60,	16,	66,	23,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {64,	13,	16,	0,	36,	0,	0,	40,	0,	0,	35,	0,	30,	0,	15,	0,	60,	16,	66,	23,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {65,	13,	16,	0,	0,	0,	0,	55,	0,	0,	50,	0,	45,	0,	15,	0,	60,	16,	66,	23,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {66,	4,	16,	0,	16,	0,	0,	70,	0,	0,	80,	0,	50,	0,	47,	0,	63,	10,	50,	13,	71,	18,	21,	23,	84,	28,	86,	36,	53,	40,	52,	45,	9E+99,	9E+99},
                                {67,	4,	16,	0,	36,	0,	0,	80,	0,	0,	100,	0,	70,	0,	47,	0,	63,	10,	50,	13,	71,	18,	21,	23,	84,	28,	86,	36,	53,	40,	52,	45,	9E+99,	9E+99},
                                {68,	4,	16,	0,	0,	0,	0,	90,	0,	0,	130,	0,	80,	0,	47,	0,	63,	10,	50,	13,	71,	18,	21,	23,	84,	28,	86,	36,	53,	40,	52,	45,	9E+99,	9E+99},
                                {69,	8,	12,	0,	16,	0,	0,	50,	0,	0,	75,	0,	35,	0,	100,	0,	2,	7,	64,	18,	76,	25,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {70,	8,	12,	0,	32,	0,	0,	65,	0,	0,	90,	0,	50,	0,	100,	0,	2,	7,	64,	18,	76,	25,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {71,	8,	12,	0,	0,	0,	0,	80,	0,	0,	105,	0,	65,	0,	100,	0,	2,	7,	64,	18,	76,	25,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {72,	15,	12,	0,	25,	0,	0,	40,	0,	0,	40,	0,	35,	0,	16,	0,	58,	5,	2,	10,	101,	18,	41,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {73,	15,	12,	0,	0,	0,	0,	80,	0,	0,	70,	0,	65,	0,	16,	0,	58,	5,	2,	10,	101,	18,	41,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {74,	14,	9,	0,	16,	0,	0,	40,	0,	0,	80,	0,	100,	0,	89,	0,	4,	0,	68,	10,	67,	17,	72,	25,	26,	30,	29,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {75,	14,	9,	0,	36,	0,	0,	55,	0,	0,	95,	0,	115,	0,	89,	0,	4,	0,	68,	10,	67,	17,	72,	25,	26,	30,	29,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {76,	14,	9,	0,	0,	0,	0,	80,	0,	0,	110,	0,	130,	0,	89,	0,	4,	0,	68,	10,	67,	17,	72,	25,	26,	30,	29,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {77,	5,	16,	0,	25,	0,	0,	50,	0,	0,	85,	0,	55,	0,	32,	0,	28,	10,	83,	18,	90,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {78,	5,	16,	0,	0,	0,	0,	65,	0,	0,	100,	0,	70,	0,	32,	0,	28,	10,	83,	18,	90,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {79,	15,	16,	0,	23,	0,	0,	90,	0,	0,	65,	0,	65,	0,	15,	0,	38,	15,	101,	22,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {80,	15,	13,	0,	0,	0,	0,	95,	0,	0,	75,	0,	110,	0,	15,	0,	38,	15,	101,	22,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {81,	3,	16,	0,	25,	0,	0,	25,	0,	0,	35,	0,	70,	0,	89,	0,	81,	0,	95,	10,	88,	18,	93,	25,	92,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {82,	3,	16,	0,	0,	0,	0,	50,	0,	0,	60,	0,	95,	0,	89,	0,	81,	0,	95,	10,	88,	18,	93,	25,	92,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {83,	6,	16,	0,	0,	0,	0,	52,	0,	0,	65,	0,	55,	0,	55,	0,	35,	5,	37,	7,	102,	18,	77,	30,	34,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {84,	6,	16,	0,	18,	0,	0,	35,	0,	0,	85,	0,	45,	0,	55,	0,	35,	7,	63,	15,	25,	28,	97,	36,	34,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {85,	6,	16,	0,	0,	0,	0,	60,	0,	0,	110,	0,	70,	0,	55,	0,	35,	7,	63,	15,	25,	28,	97,	36,	34,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {86,	15,	10,	0,	30,	0,	0,	65,	0,	0,	45,	0,	55,	0,	38,	0,	3,	20,	87,	28,	90,	32,	44,	36,	7,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {87,	15,	10,	0,	0,	0,	0,	90,	0,	0,	70,	0,	80,	0,	38,	0,	3,	20,	87,	28,	90,	32,	44,	36,	7,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {88,	12,	16,	0,	25,	0,	0,	80,	0,	0,	80,	0,	50,	0,	59,	0,	79,	10,	78,	20,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {89,	12,	16,	0,	0,	0,	0,	105,	0,	0,	105,	0,	75,	0,	59,	0,	79,	10,	78,	20,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {90,	15,	16,	0,	25,	0,	0,	30,	0,	0,	65,	0,	100,	0,	89,	0,	13,	15,	3,	24,	87,	30,	44,	36,	82,	40,	41,	45,	7,	50,	9E+99,	9E+99,	9E+99,	9E+99},
                                {91,	15,	10,	0,	0,	0,	0,	50,	0,	0,	95,	0,	180,	0,	89,	0,	13,	15,	3,	24,	87,	30,	44,	36,	82,	40,	41,	45,	7,	50,	9E+99,	9E+99,	9E+99,	9E+99},
                                {92,	7,	12,	0,	23,	0,	0,	30,	0,	0,	35,	0,	30,	0,	49,	0,	54,	10,	66,	20,	51,	25,	73,	30,	96,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {93,	7,	12,	0,	36,	0,	0,	45,	0,	0,	50,	0,	45,	0,	49,	0,	54,	10,	66,	20,	51,	25,	73,	30,	96,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {94,	7,	12,	0,	0,	0,	0,	60,	0,	0,	65,	0,	60,	0,	49,	0,	54,	10,	66,	20,	51,	25,	73,	30,	96,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {95,	14,	16,	0,	0,	0,	0,	35,	0,	0,	45,	0,	160,	0,	89,	0,	5,	9,	63,	17,	68,	25,	67,	30,	76,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {96,	13,	16,	0,	23,	0,	0,	60,	0,	0,	48,	0,	45,	0,	59,	0,	15,	10,	38,	20,	79,	25,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {97,	13,	16,	0,	0,	0,	0,	85,	0,	0,	73,	0,	70,	0,	59,	0,	15,	10,	38,	20,	79,	25,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {98,	15,	16,	0,	23,	0,	0,	30,	0,	0,	105,	0,	90,	0,	11,	0,	99,	18,	83,	25,	12,	30,	18,	38,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {99,	15,	16,	0,	0,	0,	0,	55,	0,	0,	130,	0,	115,	0,	11,	0,	99,	18,	83,	25,	12,	30,	18,	38,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {100,	3,	16,	0,	25,	0,	0,	40,	0,	0,	30,	0,	50,	0,	89,	0,	81,	7,	72,	20,	88,	26,	29,	32,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {101,	3,	16,	0,	0,	0,	0,	60,	0,	0,	50,	0,	70,	0,	89,	0,	81,	7,	72,	20,	88,	26,	29,	32,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {102,	8,	16,	0,	25,	0,	0,	60,	0,	0,	40,	0,	80,	0,	4,	0,	27,	24,	83,	28,	61,	36,	80,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {103,	8,	13,	0,	0,	0,	0,	95,	0,	0,	95,	0,	85,	0,	4,	0,	27,	24,	83,	28,	61,	36,	80,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {104,	9,	16,	0,	23,	0,	0,	50,	0,	0,	50,	0,	95,	0,	9,	0,	63,	12,	10,	18,	38,	25,	91,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {105,	9,	16,	0,	0,	0,	0,	60,	0,	0,	80,	0,	110,	0,	9,	0,	63,	12,	10,	18,	38,	25,	91,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {106,	4,	16,	0,	0,	0,	0,	50,	0,	0,	120,	0,	53,	0,	22,	0,	50,	10,	69,	30,	46,	35,	39,	40,	52,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {107,	4,	16,	0,	0,	0,	0,	50,	0,	0,	105,	0,	79,	0,	14,	0,	21,	10,	31,	30,	94,	35,	45,	40,	53,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {108,	11,	16,	0,	0,	0,	0,	90,	0,	0,	55,	0,	75,	0,	5,	0,	83,	25,	76,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {109,	12,	6,	0,	23,	0,	0,	40,	0,	0,	65,	0,	95,	0,	89,	0,	79,	9,	78,	18,	72,	25,	29,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {110,	12,	6,	0,	0,	0,	0,	65,	0,	0,	90,	0,	120,	0,	89,	0,	79,	9,	78,	18,	72,	25,	29,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {111,	14,	9,	0,	32,	0,	0,	80,	0,	0,	85,	0,	95,	0,	35,	0,	40,	20,	83,	26,	90,	33,	26,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {112,	14,	9,	0,	0,	0,	0,	105,	0,	0,	130,	0,	120,	0,	35,	0,	40,	20,	83,	26,	90,	33,	26,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {113,	11,	16,	0,	0,	0,	0,	250,	0,	0,	5,	0,	5,	0,	59,	0,	27,	20,	23,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {114,	8,	16,	0,	0,	0,	0,	65,	0,	0,	55,	0,	115,	0,	16,	0,	5,	7,	1,	12,	100,	17,	76,	25,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {115,	11,	16,	0,	0,	0,	0,	105,	0,	0,	95,	0,	80,	0,	14,	0,	63,	0,	6,	15,	21,	25,	53,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {116,	15,	16,	0,	23,	0,	0,	30,	0,	0,	40,	0,	70,	0,	11,	0,	101,	12,	12,	20,	87,	30,	41,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {117,	15,	16,	0,	0,	0,	0,	55,	0,	0,	65,	0,	95,	0,	11,	0,	101,	12,	12,	20,	87,	30,	41,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {118,	15,	16,	0,	23,	0,	0,	45,	0,	0,	67,	0,	60,	0,	55,	0,	35,	0,	40,	15,	87,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {119,	15,	16,	0,	0,	0,	0,	80,	0,	0,	92,	0,	65,	0,	55,	0,	35,	0,	40,	15,	87,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {120,	15,	16,	0,	30,	0,	0,	30,	0,	0,	45,	0,	55,	0,	89,	0,	101,	13,	66,	18,	88,	25,	41,	34,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {121,	15,	13,	0,	0,	0,	0,	60,	0,	0,	75,	0,	85,	0,	89,	0,	101,	13,	66,	18,	88,	25,	41,	34,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {122,	13,	16,	0,	0,	0,	0,	40,	0,	0,	45,	0,	65,	0,	15,	0,	60,	15,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {123,	1,	6,	0,	0,	0,	0,	70,	0,	0,	110,	0,	80,	0,	70,	0,	62,	10,	102,	20,	77,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {124,	13,	10,	0,	0,	0,	0,	65,	0,	0,	50,	0,	35,	0,	59,	0,	45,	20,	8,	25,	91,	30,	61,	35,	7,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {125,	3,	16,	0,	0,	0,	0,	65,	0,	0,	83,	0,	57,	0,	62,	0,	95,	0,	94,	15,	93,	25,	92,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {126,	5,	16,	0,	0,	0,	0,	65,	0,	0,	95,	0,	57,	0,	28,	0,	79,	0,	31,	25,	33,	30,	30,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {127,	1,	16,	0,	0,	0,	0,	65,	0,	0,	125,	0,	100,	0,	5,	0,	99,	10,	71,	20,	77,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {128,	11,	16,	0,	0,	0,	0,	75,	0,	0,	100,	0,	95,	0,	89,	0,	83,	0,	63,	15,	90,	25,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {129,	15,	16,	0,	25,	0,	0,	20,	0,	0,	10,	0,	55,	0,	89,	0,	6,	25,	24,	30,	87,	35,	41,	40,	42,	50,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {130,	15,	6,	0,	0,	0,	0,	95,	0,	0,	125,	0,	79,	0,	89,	0,	6,	25,	24,	30,	87,	35,	41,	40,	42,	50,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {131,	15,	10,	0,	0,	0,	0,	130,	0,	0,	85,	0,	80,	0,	101,	0,	8,	20,	87,	25,	44,	30,	41,	40,	7,	50,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {132,	11,	16,	0,	0,	0,	0,	48,	0,	0,	48,	0,	48,	0,	59,	0,	96,	0,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {133,	11,	16,	0,	25,	0,	0,	55,	0,	0,	55,	0,	50,	0,	89,	0,	62,	0,	6,	20,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {134,	15,	16,	0,	0,	0,	0,	130,	0,	0,	65,	0,	60,	0,	89,	0,	62,	0,	6,	20,	101,	25,	3,	30,	87,	35,	41,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {135,	3,	16,	0,	0,	0,	0,	65,	0,	0,	65,	0,	60,	0,	89,	0,	62,	0,	6,	20,	95,	25,	57,	30,	93,	35,	92,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {136,	5,	16,	0,	0,	0,	0,	65,	0,	0,	130,	0,	60,	0,	89,	0,	62,	0,	6,	20,	28,	25,	79,	30,	33,	35,	30,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {137,	11,	16,	0,	0,	0,	0,	65,	0,	0,	60,	0,	70,	0,	89,	0,	60,	25,	66,	30,	97,	35,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {138,	15,	14,	0,	25,	0,	0,	35,	0,	0,	40,	0,	100,	0,	101,	0,	40,	15,	82,	20,	41,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {139,	15,	14,	0,	0,	0,	0,	70,	0,	0,	60,	0,	125,	0,	101,	0,	40,	15,	82,	20,	41,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {140,	15,	14,	0,	25,	0,	0,	30,	0,	0,	80,	0,	90,	0,	70,	0,	1,	15,	77,	20,	41,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {141,	15,	14,	0,	0,	0,	0,	60,	0,	0,	115,	0,	105,	0,	70,	0,	1,	15,	77,	20,	41,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {142,	14,	6,	0,	0,	0,	0,	80,	0,	0,	105,	0,	65,	0,	102,	0,	6,	10,	67,	20,	90,	25,	42,	50,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {143,	11,	16,	0,	0,	0,	0,	160,	0,	0,	110,	0,	65,	0,	38,	0,	66,	0,	8,	20,	23,	30,	42,	50,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {144,	10,	6,	0,	0,	0,	0,	90,	0,	0,	85,	0,	100,	0,	55,	0,	34,	0,	44,	0,	7,	0,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {145,	3,	6,	0,	0,	0,	0,	90,	0,	0,	90,	0,	85,	0,	25,	0,	34,	0,	93,	0,	92,	0,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {146,	5,	6,	0,	0,	0,	0,	90,	0,	0,	100,	0,	90,	0,	55,	0,	34,	0,	33,	0,	30,	0,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {147,	2,	16,	0,	30,	0,	0,	41,	0,	0,	64,	0,	45,	0,	5,	0,	76,	20,	24,	30,	34,	50,	42,	55,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {148,	2,	16,	0,	50,	0,	0,	61,	0,	0,	84,	0,	65,	0,	5,	0,	76,	20,	24,	30,	34,	50,	42,	55,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {149,	2,	6,	0,	0,	0,	0,	91,	0,	0,	134,	0,	95,	0,	5,	0,	76,	20,	24,	30,	34,	50,	42,	55,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                                {150,	13,	16,	0,	0,	0,	0,	106,	0,	0,	110,	0,	90,	0,	15,	0,	88,	0,	60,	0,	66,	0,	61,	0,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all the player's Pokemon, in the same order as above.
 double Player[151][34];
 
 // The names of all the techniques, in order.
 const string Technique_Names[102]={"Absorb",
                                    "Acid",
                                    "Aurora Beam",
                                    "Barrage",
                                    "Bind",
                                    "Bite",
                                    "Blizzard",
                                    "Body Slam",
                                    "Bone Club",
                                    "Bonemerang",
                                    "Bubble",
                                    "BubbleBeam",
                                    "Clamp",
                                    "Comet Punch",
                                    "Confusion",
                                    "Constrict",
                                    "Counter",
                                    "Crabhammer",
                                    "Cut",
                                    "Dig",
                                    "Dizzy Punch",
                                    "Double Kick",
                                    "Double-Edge",
                                    "Dragon Rage",
                                    "Drill Peck",
                                    "Earthquake",
                                    "Egg Bomb",
                                    "Ember",
                                    "Explosion",
                                    "Fire Blast",
                                    "Fire Punch",
                                    "Fire Spin",
                                    "Flamethrower",
                                    "Fly",
                                    "Fury Attack",
                                    "Fury Swipes",
                                    "Gust",
                                    "Headbutt",
                                    "Hi Jump Kick",
                                    "Horn Attack",
                                    "Hydro Pump",
                                    "Hyper Beam",
                                    "Hyper Fang",
                                    "Ice Beam",
                                    "Ice Punch",
                                    "Jump Kick",
                                    "Karate Chop",
                                    "Leech Life",
                                    "Lick",
                                    "Low Kick",
                                    "Mega Drain",
                                    "Mega Kick",
                                    "Mega Punch",
                                    "Night Shade",
                                    "Peck",
                                    "Petal Dance",
                                    "Pin Missile",
                                    "Poison Sting",
                                    "Pound",
                                    "Psybeam",
                                    "Psychic",
                                    "Quick Attack",
                                    "Rage",
                                    "Razor Leaf",
                                    "Razor Wind",
                                    "Recover",
                                    "Rock Slide",
                                    "Rock Throw",
                                    "Rolling Kick",
                                    "Scratch",
                                    "Seismic Toss",
                                    "Selfdestruct",
                                    "Shadow Ball",
                                    "Skull Bash",
                                    "Sky Attack",
                                    "Slam",
                                    "Slash",
                                    "Sludge",
                                    "Smog",
                                    "SolarBeam",
                                    "SonicBoom",
                                    "Spike Cannon",
                                    "Stomp",
                                    "Strength",
                                    "Struggle",
                                    "Submission",
                                    "Surf",
                                    "Swift",
                                    "Tackle",
                                    "Take Down",
                                    "Thrash",
                                    "Thunder",
                                    "Thunderbolt",
                                    "ThunderPunch",
                                    "ThunderShock",
                                    "Transform",
                                    "Tri Attack",
                                    "Twineedle",
                                    "ViceGrip",
                                    "Vine Whip",
                                    "Water Gun",
                                    "Wing Attack"};
 
 // The numerical data for all the techniques, in the following order:
 // Type, Damage, Self-Damage.
 // Types in this order: 1 Bug, 2 Dragon, 3 Electric, 4 Fighting, 5 Fire, 6 Flying, 7 Ghost, 8 Grass, 9 Ground, 10 Ice, 11 Normal, 12 Poison, 13 Psychic, 14 Rock, 15 Water.
 const double Techniques[102][3]={{8,	20,	0},
                               {12,	40,	0},
                               {10,	65,	0},
                               {11,	15,	0},
                               {11,	15,	0},
                               {11,	60,	0},
                               {10,	120,	0},
                               {11,	85,	0},
                               {9,	65,	0},
                               {9,	50,	0},
                               {15,	20,	0},
                               {15,	65,	0},
                               {15,	35,	0},
                               {4,	18,	0},
                               {13,	50,	0},
                               {11,	10,	0},
                               {4,	40,	0},
                               {15,	90,	0},
                               {11,	50,	0},
                               {9,	80,	0},
                               {4,	70,	0},
                               {4,	30,	0},
                               {11,	120,	60},
                               {2,	40,	0},
                               {6,	80,	0},
                               {9,	100,	0},
                               {11,	100,	0},
                               {5,	40,	0},
                               {11,	250,	9E+99},
                               {5,	120,	0},
                               {5,	75,	0},
                               {5,	15,	0},
                               {5,	95,	0},
                               {6,	90,	0},
                               {11,	30,	0},
                               {11,	35,	0},
                               {6,	40,	0},
                               {11,	70,	0},
                               {4,	100,	0},
                               {11,	65,	0},
                               {15,	120,	0},
                               {11,	150,	0},
                               {11,	80,	0},
                               {10,	95,	0},
                               {10,	75,	0},
                               {4,	70,	0},
                               {4,	50,	0},
                               {1,	30,	0},
                               {7,	20,	0},
                               {4,	50,	0},
                               {8,	60,	0},
                               {4,	120,	0},
                               {4,	80,	0},
                               {7,	40,	0},
                               {6,	35,	0},
                               {8,	70,	0},
                               {1,	70,	0},
                               {12,	15,	0},
                               {11,	40,	0},
                               {13,	65,	0},
                               {13,	90,	0},
                               {11,	40,	0},
                               {11,	50,	0},
                               {8,	55,	0},
                               {6,	80,	0},
                               {13,	0,	0},
                               {14,	75,	0},
                               {14,	50,	0},
                               {4,	60,	0},
                               {11,	40,	0},
                               {4,	60,	0},
                               {11,	200,	9E+99},
                               {7,	90,	0},
                               {11,	100,	40},
                               {6,	140,	0},
                               {11,	80,	0},
                               {11,	70,	0},
                               {12,	65,	0},
                               {12,	20,	0},
                               {8,	120,	0},
                               {11,	20,	0},
                               {11,	50,	0},
                               {11,	65,	0},
                               {11,	80,	0},
                               {11,	50,	10},
                               {4,	80,	0},
                               {15,	95,	0},
                               {11,	60,	0},
                               {11,	35,	0},
                               {11,	90,	20},
                               {11,	90,	30},
                               {3,	120,	0},
                               {3,	95,	0},
                               {3,	75,	0},
                               {3,	40,	0},
                               {11,	0,	0},
                               {11,	80,	0},
                               {1,	40,	0},
                               {11,	55,	0},
                               {8,	35,	0},
                               {15,	40,	0},
                               {6,	60,	0}};
 
 // Damage ratio matrix, with types in the same order as above.
 const double Types[17][17]={{0.5,	1,	1,	1,	0.5,	0.5,	1,	2,	1,	1,	1,	1,	1,	1,	1,	1,	1},
                             {1,	2,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
                             {1,	0.5,	0.5,	1,	1,	2,	1,	0.5,	0,	1,	1,	1,	1,	0,	2,	1,	0.5},
                             {1,	0.5,	1,	1,	1,	0.5,	0,	1,	1,	2,	2,	1,	1,	2,	1,	1,	1},
                             {2,	0.5,	1,	1,	0.5,	1,	1,	2,	1,	2,	1,	1,	1,	0.5,	0.5,	1,	1},
                             {2,	1,	1,	2,	1,	1,	1,	2,	2,	1,	1,	1,	1,	0.5,	1,	1,	0.5},
                             {1,	1,	1,	1,	1,	1,	2,	1,	1,	1,	0,	1,	2,	1,	1,	1,	1},
                             {0.5,	0.5,	1,	1,	0.5,	0.5,	1,	0.5,	2,	0.5,	1,	0.5,	1,	2,	2,	1,	1},
                             {1,	1,	2,	0.5,	2,	0,	1,	0.5,	0.5,	1,	1,	1,	1,	2,	1,	1,	1},
                             {1,	2,	1,	0.5,	0.5,	2,	1,	2,	2,	0.5,	1,	1,	1,	2,	1,	1,	1},
                             {1,	1,	1,	1,	1,	1,	0,	1,	1,	1,	1,	1,	1,	0.5,	1,	1,	1},
                             {1,	1,	1,	1,	1,	1,	1,	2,	1,	1,	1,	0.5,	1,	0.5,	1,	1,	1},
                             {1,	1,	1,	2,	1,	1,	0.5,	1,	1,	1,	1,	2,	0.5,	1,	1,	1,	1},
                             {2,	1,	2,	0.5,	1,	2,	1,	1,	1,	1,	1,	1,	1,	0.5,	1,	1,	1},
                             {1,	0.5,	1,	1,	2,	1,	1,	0.5,	2,	1,	1,	1,	1,	2,	0.5,	1,	1},
                             {1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
                             {1,	1,	1,	1,	1,	2,	1,	1,	1,	1,	1,	1,	1,	1,	2,	1,	1}};

 // The names of all possible opponents.
 string Opponent_Names[15]={"Brock", "Misty", "Lt. Surge", "Erika", "Koga", "Sabrina", "Blaine", "Giovanni", "Lorelei", "Bruno", "Agatha", "Lance", "Team Rocket", "Ash", "Wild Pokemon"};
 
 // The numerical data for all of Brock's Pokemon.
 double Brock[6][34]={{74,	14,	9,	12,	16,	0,	0,	40,	48,	48,	80,	96,	100,	120,	89,	0,	4,	0,	68,	10,	67,	17,	72,	25,	26,	30,	29,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {95,	14,	16,	15,	0,	0,	0,	35,	52.5,	52.5,	45,	67.5,	160,	240,	89,	0,	5,	9,	63,	17,	68,	25,	67,	30,	76,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {50,	9,	16,	10,	18,	0,	0,	10,	10,	10,	55,	55,	25,	25,	70,	0,	20,	12,	77,	18,	26,	26,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {51,	9,	16,	12,	0,	0,	0,	35,	42,	42,	80,	96,	50,	60,	70,	0,	20,	12,	77,	18,	26,	26,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {95,	14,	16,	18,	0,	0,	0,	35,	63,	63,	45,	81,	160,	288,	89,	0,	5,	9,	63,	17,	68,	25,	67,	30,	76,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {28,	9,	16,	12,	0,	0,	0,	75,	90,	90,	100,	120,	110,	132,	70,	0,	58,	5,	36,	10,	88,	25,	77,	30,	20,	33,	26,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Misty's Pokemon.
 double Misty[6][34]={{120,	15,	16,	25,	30,	0,	0,	30,	75,	75,	45,	112.5,	55,	137.5,	89,	0,	101,	13,	66,	18,	88,	25,	41,	34,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {118,	15,	16,	20,	23,	0,	0,	45,	90,	90,	67,	134,	60,	120,	55,	0,	35,	0,	40,	15,	87,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {116,	15,	16,	18,	23,	0,	0,	30,	54,	54,	40,	72,	70,	126,	11,	0,	101,	12,	12,	20,	87,	30,	41,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {86,	15,	10,	21,	30,	0,	0,	65,	136.5,	136.5,	45,	94.5,	55,	115.5,	38,	0,	3,	20,	87,	28,	90,	32,	44,	36,	7,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {119,	15,	16,	25,	0,	0,	0,	80,	200,	200,	92,	230,	65,	162.5,	55,	0,	35,	0,	40,	15,	87,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {121,	15,	13,	30,	0,	0,	0,	60,	180,	180,	75,	225,	85,	255,	89,	0,	101,	13,	66,	18,	88,	25,	41,	34,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Lt. Surge's Pokemon.
 double Lt_Surge[6][34]={{100,	3,	16,	25,	25,	0,	0,	40,	100,	100,	30,	75,	50,	125,	89,	0,	81,	7,	72,	20,	88,	26,	29,	32,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {81,	3,	16,	25,	25,	0,	0,	25,	62.5,	62.5,	35,	87.5,	70,	175,	89,	0,	81,	0,	95,	10,	88,	18,	93,	25,	92,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {101,	3,	16,	30,	0,	0,	0,	60,	180,	180,	50,	150,	70,	210,	89,	0,	81,	7,	72,	20,	88,	26,	29,	32,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {82,	3,	16,	30,	0,	0,	0,	50,	150,	150,	60,	180,	95,	285,	89,	0,	81,	0,	95,	10,	88,	18,	93,	25,	92,	36,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {125,	3,	16,	33,	0,	0,	0,	65,	214.5,	214.5,	83,	273.9,	57,	188.1,	62,	0,	95,	0,	94,	15,	93,	25,	92,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {26,	3,	16,	35,	0,	0,	0,	60,	210,	210,	90,	315,	55,	192.5,	95,	0,	62,	11,	76,	20,	88,	26,	94,	30,	93,	35,	92,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Erika's Pokemon.
 double Erika[6][34]={{1,	8,	12,	30,	16,	0,	0,	45,	135,	135,	49,	147,	49,	147,	89,	0,	1,	7,	100,	13,	51,	20,	19,	25,	64,	30,	6,	32,	56,	36,	80,	40,	42,	50},
                      {70,	8,	12,	35,	32,	0,	0,	65,	227.5,	227.5,	90,	315,	50,	175,	100,	0,	2,	7,	64,	18,	76,	25,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {44,	8,	12,	35,	36,	0,	0,	60,	210,	210,	65,	227.5,	70,	245,	1,	0,	2,	10,	51,	18,	56,	26,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {114,	8,	16,	37,	0,	0,	0,	65,	240.5,	240.5,	55,	203.5,	115,	425.5,	16,	0,	5,	7,	1,	12,	100,	17,	76,	25,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {71,	8,	12,	40,	0,	0,	0,	80,	320,	320,	105,	420,	65,	260,	100,	0,	2,	7,	64,	18,	76,	25,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {45,	8,	12,	40,	0,	0,	0,	75,	300,	300,	80,	320,	85,	340,	1,	0,	2,	10,	51,	18,	56,	26,	80,	34,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Koga's Pokemon.
 double Koga[6][34]={{48,	1,	12,	35,	18,	0,	0,	60,	210,	210,	55,	192.5,	50,	175,	89,	0,	48,	0,	15,	10,	60,	20,	61,	28,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                     {15,	1,	6,	33,	0,	0,	0,	65,	214.5,	214.5,	80,	264,	40,	132,	58,	0,	35,	10,	36,	13,	62,	15,	98,	17,	19,	20,	63,	23,	6,	30,	88,	33,	57,	40},
                     {49,	1,	12,	40,	0,	0,	0,	70,	280,	280,	65,	260,	60,	240,	89,	0,	48,	0,	15,	10,	60,	20,	61,	28,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                     {24,	12,	16,	35,	0,	0,	0,	60,	210,	210,	85,	297.5,	69,	241.5,	16,	0,	5,	5,	58,	10,	89,	15,	36,	17,	2,	20,	6,	25,	20,	30,	43,	40,	9E+99,	9E+99},
                     {110,	12,	6,	42,	0,	0,	0,	65,	273,	273,	90,	378,	120,	504,	89,	0,	79,	9,	78,	18,	72,	25,	29,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                     {89,	12,	16,	45,	0,	0,	0,	105,	472.5,	472.5,	105,	472.5,	75,	337.5,	59,	0,	79,	10,	78,	20,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Sabrina's Pokemon.
 double Sabrina[6][34]={{64,	13,	16,	40,	36,	0,	0,	40,	160,	160,	35,	140,	30,	120,	15,	0,	60,	16,	66,	23,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {97,	13,	16,	38,	0,	0,	0,	85,	323,	323,	73,	277.4,	70,	266,	59,	0,	15,	10,	38,	20,	79,	25,	61,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {64,	13,	16,	40,	36,	0,	0,	40,	160,	160,	35,	140,	30,	120,	15,	0,	60,	16,	66,	23,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {64,	13,	16,	40,	36,	0,	0,	40,	160,	160,	35,	140,	30,	120,	15,	0,	60,	16,	66,	23,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {122,	13,	16,	44,	0,	0,	0,	40,	176,	176,	45,	198,	65,	286,	15,	0,	60,	15,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {65,	13,	16,	48,	0,	0,	0,	55,	264,	264,	50,	240,	45,	216,	15,	0,	60,	16,	66,	23,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Blaine's Pokemon.
 double Blaine[6][34]={{77,	5,	16,	45,	25,	0,	0,	50,	225,	225,	85,	382.5,	55,	247.5,	32,	0,	28,	10,	83,	18,	90,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {58,	5,	16,	46,	36,	0,	0,	55,	253,	253,	70,	322,	45,	207,	6,	0,	32,	0,	28,	10,	90,	18,	33,	29,	30,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {78,	5,	16,	47,	0,	0,	0,	65,	305.5,	305.5,	100,	470,	70,	329,	32,	0,	28,	10,	83,	18,	90,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {59,	5,	16,	48,	0,	0,	0,	90,	432,	432,	110,	528,	80,	384,	6,	0,	32,	0,	28,	10,	90,	18,	33,	29,	30,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {126,	5,	16,	49,	0,	0,	0,	65,	318.5,	318.5,	95,	465.5,	57,	279.3,	28,	0,	79,	0,	31,	25,	33,	30,	30,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {6,	5,	6,	50,	0,	0,	0,	78,	390,	390,	84,	420,	78,	390,	70,	0,	32,	7,	28,	13,	19,	20,	77,	25,	33,	32,	34,	36,	24,	38,	30,	40,	42,	50}};
 
 // The numerical data for all of Giovanni's Pokemon.
 double Giovanni[6][34]={{111,	14,	9,	50,	32,	0,	0,	80,	400,	400,	85,	425,	95,	475,	35,	0,	40,	20,	83,	26,	90,	33,	26,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {127,	1,	16,	52,	0,	0,	0,	65,	338,	338,	125,	650,	100,	520,	5,	0,	99,	10,	71,	20,	77,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {53,	11,	16,	55,	0,	0,	0,	65,	357.5,	357.5,	70,	385,	60,	330,	70,	0,	36,	9,	6,	15,	77,	23,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {112,	14,	9,	57,	0,	0,	0,	105,	598.5,	598.5,	130,	741,	120,	684,	35,	0,	40,	20,	83,	26,	90,	33,	26,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                         {31,	12,	9,	60,	0,	0,	0,	90,	540,	540,	82,	492,	87,	522,	89,	0,	58,	5,	36,	8,	70,	10,	22,	15,	6,	20,	8,	36,	26,	40,	91,	45,	90,	50},
                         {34,	12,	9,	60,	0,	0,	0,	81,	486,	486,	92,	552,	77,	462,	89,	0,	58,	5,	35,	8,	22,	10,	40,	18,	91,	23,	8,	27,	77,	30,	83,	35,	26,	40}};
 
 // The numerical data for all of Lorelli's Pokemon.
 double Lorelei[5][34]={{87,	15,	10,	56,	0,	0,	0,	90,	504,	504,	70,	392,	80,	448,	38,	0,	3,	20,	87,	28,	90,	32,	44,	36,	7,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {91,	15,	10,	56,	0,	0,	0,	50,	280,	280,	95,	532,	180,	1008,	89,	0,	13,	15,	3,	24,	87,	30,	44,	36,	82,	40,	41,	45,	7,	50,	9E+99,	9E+99,	9E+99,	9E+99},
                        {80,	15,	13,	54,	0,	0,	0,	95,	513,	513,	75,	405,	110,	594,	15,	0,	38,	15,	101,	22,	61,	30,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {124,	13,	10,	57,	0,	0,	0,	65,	370.5,	370.5,	50,	285,	35,	199.5,	59,	0,	45,	20,	8,	25,	91,	30,	61,	35,	7,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                        {131,	15,	10,	58,	0,	0,	0,	130,	754,	754,	85,	493,	80,	464,	101,	0,	8,	20,	87,	25,	44,	30,	41,	40,	7,	50,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Bruno's Pokemon.
 double Bruno[5][34]={{106,	4,	16,	55,	0,	0,	0,	50,	275,	275,	120,	660,	53,	291.5,	22,	0,	50,	10,	69,	30,	46,	35,	39,	40,	52,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {95,	14,	16,	56,	0,	0,	0,	35,	196,	196,	45,	252,	160,	896,	89,	0,	5,	9,	63,	17,	68,	25,	67,	30,	76,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {107,	4,	16,	55,	0,	0,	0,	50,	275,	275,	105,	577.5,	79,	434.5,	14,	0,	21,	10,	31,	30,	94,	35,	45,	40,	53,	45,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {95,	14,	16,	58,	0,	0,	0,	35,	203,	203,	45,	261,	160,	928,	89,	0,	5,	9,	63,	17,	68,	25,	67,	30,	76,	33,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {68,	4,	16,	60,	0,	0,	0,	90,	540,	540,	130,	780,	80,	480,	47,	0,	63,	10,	50,	13,	71,	18,	21,	23,	84,	28,	86,	36,	53,	40,	52,	45,	9E+99,	9E+99}};
 
 // The numerical data for all of Agatha's Pokemon.
 double Agatha[5][34]={{94,	7,	12,	58,	0,	0,	0,	60,	348,	348,	65,	377,	60,	348,	49,	0,	54,	10,	66,	20,	51,	25,	73,	30,	96,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {42,	12,	6,	57,	0,	0,	0,	75,	427.5,	427.5,	80,	456,	70,	399,	48,	0,	102,	18,	6,	25,	43,	38,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {93,	7,	12,	57,	36,	0,	0,	45,	256.5,	256.5,	50,	285,	45,	256.5,	49,	0,	54,	10,	66,	20,	51,	25,	73,	30,	96,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                       {24,	12,	16,	57,	0,	0,	0,	60,	342,	342,	85,	484.5,	69,	393.3,	16,	0,	5,	5,	58,	10,	89,	15,	36,	17,	2,	20,	6,	25,	20,	30,	43,	40,	9E+99,	9E+99},
                       {94,	7,	12,	60,	0,	0,	0,	60,	360,	360,	65,	390,	60,	360,	49,	0,	54,	10,	66,	20,	51,	25,	73,	30,	96,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of Lance's Pokemon.
 double Lance[5][34]={{130,	15,	6,	60,	0,	0,	0,	95,	570,	570,	125,	750,	79,	474,	89,	0,	6,	25,	24,	30,	87,	35,	41,	40,	42,	50,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {148,	2,	16,	63,	50,	0,	0,	61,	384.3,	384.3,	84,	529.2,	65,	409.5,	5,	0,	76,	20,	24,	30,	34,	50,	42,	55,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {148,	2,	16,	63,	50,	0,	0,	61,	384.3,	384.3,	84,	529.2,	65,	409.5,	5,	0,	76,	20,	24,	30,	34,	50,	42,	55,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                      {6,	5,	6,	64,	0,	0,	0,	78,	499.2,	499.2,	84,	537.6,	78,	499.2,	70,	0,	32,	7,	28,	13,	19,	20,	77,	25,	33,	32,	34,	36,	24,	38,	30,	40,	42,	50},
                      {149,	2,	6,	65,	0,	0,	0,	91,	591.5,	591.5,	134,	871,	95,	617.5,	5,	0,	76,	20,	24,	30,	34,	50,	42,	55,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99}};
 
 // The numerical data for all of the Rocket Grunt's Pokemon.
 double Team_Rocket[3][34]={{109,	12,	6,	5,	23,	0,	0,	40,	20,	20,	65,	32.5,	95,	47.5,	89,	0,	79,	9,	78,	18,	72,	25,	29,	35,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                            {52,	11,	16,	5,	18,	0,	0,	40,	20,	20,	45,	22.5,	35,	17.5,	70,	0,	36,	9,	6,	15,	77,	23,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                            {23,	12,	16,	5,	25,	0,	0,	35,	17.5,	17.5,	60,	30,	44,	22,	16,	0,	5,	5,	58,	10,	89,	15,	36,	17,	2,	20,	6,	25,	20,	30,	43,	40,	9E+99,	9E+99}};


 
 // The numerical data for all of Ash's Pokemon.
 double Ash[6][34]={{0,	17,	16,	5,	0,	0,	0,	70,	35,	35,	110,	55,	60,	30,	95,	0,	62,	11,	76,	20,	88,	26,	94,	30,	93,	35,	92,	40,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99,	9E+99},
                    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0}};



 // The names of all the locations, in order.
 const string Location_Names[43]={"Pallet Town",
                                  "Route 1",
                                  "Viridian City",
                                  "Route 2",
                                  "Viridian Forest",
                                  "Pewter City",
                                  "Route 3",
                                  "Mt. Moon",
                                  "Route 4",
                                  "Cerulean City",
                                  "Route 5",
                                  "Saffron City",
                                  "Route 6",
                                  "Vermillion City",
                                  "Route 11",
                                  "Diglett's Cave",
                                  "Route 9",
                                  "Rock Tunnel",
                                  "Route 10",
                                  "Power Plant",
                                  "Lavender Town",
                                  "Route 12",
                                  "Route 8",
                                  "Route 7",
                                  "Celadon City",
                                  "Route 16",
                                  "Route 17",
                                  "Route 18",
                                  "Route 13",
                                  "Route 14",
                                  "Route 15",
                                  "Fuchsia City",
                                  "Safari Zone",
                                  "Route 19",
                                  "Seafoam Islands",
                                  "Route 20",
                                  "Cinnabar Island",
                                  "Route 21",
                                  "Route 22",
                                  "Victory Road",
                                  "Route 23",
                                  "Indigo Plateau",
                                  "Unknown Dungeon"};
 
 // The numerical data for each location, in the same order as above.
 const int Locations[43][27]={{2,	38,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {3,	1,	0,	0,	50,	3,	7,	19,	40,	16,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {4,	2,	39,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {5,	3,	0,	0,	50,	5,	9,	19,	40,	16,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {6,	4,	0,	0,	75,	5,	13,	10,	20,	11,	30,	13,	50,	14,	60,	25,	65,	16,	95,	17,	100,	0,	100,	0,	100,	0,	100},
                              {0,	5,	0,	7,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {0,	0,	6,	8,	50,	10,	15,	39,	5,	23,	35,	21,	70,	27,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	7,	9,	75,	15,	20,	35,	2,	46,	7,	41,	75,	74,	85,	27,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	8,	10,	50,	15,	25,	23,	30,	21,	80,	27,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {43,	11,	9,	17,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {10,	12,	0,	0,	50,	10,	15,	37,	10,	43,	40,	69,	70,	52,	80,	58,	90,	63,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {11,	13,	24,	23,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {12,	14,	0,	0,	50,	10,	15,	37,	10,	43,	40,	69,	70,	52,	80,	58,	90,	63,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {13,	0,	0,	15,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {16,	0,	14,	29,	50,	15,	25,	96,	20,	23,	50,	21,	80,	27,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	15,	0,	0,	50,	10,	25,	50,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	10,	18,	50,	15,	25,	21,	30,	27,	50,	43,	70,	69,	90,	63,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	19,	17,	0,	75,	15,	25,	74,	20,	95,	30,	41,	80,	104,	90,	66,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {18,	21,	0,	20,	50,	15,	25,	21,	30,	27,	60,	43,	80,	69,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	19,	0,	75,	15,	30,	25,	5,	100,	50,	81,	95,	125,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {19,	22,	23,	0,	50,	15,	25,	92,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {21,	29,	0,	0,	50,	20,	30,	43,	30,	69,	60,	48,	80,	83,	85,	114,	95,	132,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	12,	21,	50,	15,	25,	37,	10,	43,	40,	69,	70,	52,	80,	58,	90,	63,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	25,	12,	50,	15,	25,	37,	10,	43,	40,	69,	70,	52,	80,	58,	90,	63,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	26,	24,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {0,	27,	0,	25,	50,	20,	30,	21,	30,	22,	35,	23,	75,	84,	95,	85,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {26,	28,	0,	0,	50,	20,	30,	21,	30,	22,	35,	23,	75,	84,	95,	85,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	27,	32,	50,	25,	35,	21,	30,	22,	35,	23,	75,	84,	95,	85,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {22,	30,	15,	0,	50,	25,	35,	43,	30,	69,	60,	48,	80,	83,	85,	114,	95,	132,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {29,	0,	31,	0,	50,	25,	35,	43,	30,	69,	60,	48,	80,	83,	85,	114,	95,	132,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	32,	30,	50,	25,	35,	43,	30,	69,	60,	48,	80,	83,	85,	114,	95,	132,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {33,	34,	28,	31,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {0,	32,	0,	0,	50,	25,	35,	113,	1,	111,	21,	123,	23,	128,	33,	115,	38,	77,	68,	102,	95,	108,	100,	0,	100,	0,	100},
                              {32,	35,	0,	0,	60,	25,	35,	72,	30,	116,	38,	129,	78,	147,	80,	118,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	36,	34,	75,	25,	40,	86,	20,	138,	22,	140,	24,	90,	34,	120,	44,	98,	64,	131,	70,	54,	80,	60,	90,	79,	100},
                              {0,	0,	37,	35,	60,	25,	35,	72,	30,	116,	38,	129,	78,	147,	80,	118,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {38,	0,	0,	36,	50,	25,	40,	126,	5,	109,	52,	88,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {1,	37,	0,	0,	50,	15,	25,	72,	30,	116,	38,	129,	78,	147,	80,	118,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	0,	40,	3,	50,	5,	10,	19,	5,	16,	20,	56,	50,	21,	70,	29,	85,	32,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {41,	39,	0,	0,	90,	35,	50,	95,	20,	42,	40,	74,	60,	75,	70,	66,	90,	67,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {42,	40,	0,	0,	75,	35,	50,	24,	30,	57,	50,	132,	60,	22,	90,	28,	100,	0,	100,	0,	100,	0,	100,	0,	100,	0,	100},
                              {0,	41,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
                              {0,	10,	0,	0,	80,	50,	80,	137,	10,	142,	20,	124,	30,	97,	40,	122,	50,	106,	60,	107,	70,	143,	80,	127,	90,	133,	100}};
 
 // Declare functions.
 
 void Save_Game();
 void Load_Game();
 void New_Game();
 void Player_Update();
 void Ash_Update();
 void Rocket_Update();
 void Player_Active_Update();
 void Opponent_Active_Update();
 void Display_Information();
 void Draw_Map();
 void Display_Menu();
 void Prompt_Choice();
 void Evaluate_Choice();
 void Battle(int opponent);
 void Display_Battle_Screen(int opponent, int player_count, int opponent_count);
 void Player_Attack(int opponent);
 void Opponent_Attack();
 void Select_Player_Active();
 void Select_Opponent_Active(int opponent);
 void Display_Comment();
 void Opponent_Faint_Check(int opponent);
 void Player_Faint_Check();
 void HP_Check();
 void Pause();
  
 // The main code.
 int main()
 {
     // Display the title screen, and prompt the player to start a new game, or load a previous game.
     srand(45);
     system("cls");
     cout << endl 
     << "                                POKEMON" << endl << endl 
     << "                           'Purple Version'" << endl << endl << endl
     << "                              Disclaimer:" << endl << endl
     << "   'Pokemon' and all related titles, characters, and logos are the property"
     << endl << "   of The Pokemon Company, Nintendo, Game Freak, and Creatures, Inc.";
     Pause();
     cout << endl << endl
     << "   What would you like to do?" << endl
     << "      1: Start a new game." << endl
     << "      2: Load saved game." << endl << endl;
     
     while(Menu_Choice!=1 && Menu_Choice!=2 && Menu_Choice!=150)
     {
        cout << "   [Enter the number of your choice here]: ";
        cin >> Menu_Choice;
        cin.ignore();
     }
     
     if(Menu_Choice==150)
     {
         Name="Gary";
         Status=1;
         
         // Set the player's Pokemon matrix equal to the Pokemon matrix.
         for(int k=0;k<151;k++)
         {
             for(int l=0;l<34;l++)
                 Player[k][l]=Pokemon[k][l];
         }
         
         // Give the player all 150 Pokemon at level 100.
         for(int k=1;k<151;k++)
         {
             Player[k][3]=100;
             Player[k][5]=0;
             for(int l=0;l<Player[k][3];l++)
             {
                Player[k][5]+=100*pow((double)l+1,2);
             }
         }
         Player_Update();
         for(int k=1;k<151;k++)
         {
             Player[k][9]=Player[k][8];;
         }
     }
     else
     {
         if(Menu_Choice==1)
             New_Game();
         else
         {
             Load_Game();
             srand(Turns);
         }
     }
     
     // Count healthy Pokemon.
     Number_Pokemon=0;
     for(int k=0;k<151;k++)
     {
         if(Player[k][9]!=0)
             Number_Pokemon++;
     }
     
     // Play continuously.
     while(Turns>-1)
     {
         // Check for Fly and Surf.
         for(int k=0;k<151;k++)
         {
             for(int l=0;l<34;l++)
             {
                 if(l>13 && l%2==0 && Player[k][l]==87 && Player[k][8]!=0 && Player[k][3]>=Player[k][l+1])
                     Surf=1;
                 if(l>13 && l%2==0 && Player[k][l]==34 && Player[k][8]!=0 && Player[k][3]>=Player[k][l+1])
                 {
                     Fly=1;
                     Options[8]=1;
                 }
             }
         }
     
         // Check Options.
         if(Badges[0]+Badges[1]+Badges[1]+Badges[1]+Badges[1]+Badges[1]+Badges[1]+Badges[1]==8)
             Options[9]=1;
         
         // Make sure Ash's and Team Rocket's Pokemon are up-to-date.
         if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]==0)
         {
             if(Ash[0][3]!=0 && Ash[0][3]<9)
             {
                 Ash[0][3]=9;
             }
             for(int k=0;k<34;k++)
             {
                 Ash[1][k]=Pokemon[10][k];
             }
             Ash[1][3]=5;
             for(int k=0;k<34;k++)
             {
                 Ash[2][k]=Pokemon[17][k];
             }
             Ash[2][3]=10;
             Ash_Update();
             
             Team_Rocket[0][3]=6;
             Team_Rocket[1][3]=5;
             Team_Rocket[2][3]=6;
             Rocket_Update();
         }
         else
         {
             if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]<3)
             {
                 if(Ash[0][3]!=0 && Ash[0][3]<18)
                     Ash[0][3]=18;
                 for(int k=0;k<34;k++)
                 {
                     Ash[1][k]=Pokemon[4][k];
                 }
                 Ash[1][3]=15;
                 for(int k=0;k<34;k++)
                 {
                     Ash[2][k]=Pokemon[1][k];
                 }
                 Ash[2][3]=15;
                 for(int k=0;k<34;k++)
                 {
                     Ash[3][k]=Pokemon[7][k];
                 }
                 Ash[3][3]=15;
                 for(int k=0;k<34;k++)
                 {
                     Ash[4][k]=Pokemon[12][k];
                 }
                 Ash[4][3]=18;
                 for(int k=0;k<34;k++)
                 {
                     Ash[5][k]=Pokemon[17][k];
                 }
                 Ash[5][3]=18;
                 Ash_Update();
                 
                 Team_Rocket[0][3]=15;
                 Team_Rocket[1][3]=13;
                 Team_Rocket[2][3]=15;
                 Rocket_Update();
             }
             else
             {
                 if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]<5)
                 {
                     if(Ash[0][3]!=0 && Ash[0][3]<27)
                         Ash[0][3]=27;
                     for(int k=0;k<34;k++)
                     {
                         Ash[1][k]=Pokemon[5][k];
                     }
                     Ash[1][3]=23;
                     for(int k=0;k<34;k++)
                     {
                         Ash[2][k]=Pokemon[2][k];
                     }
                     Ash[2][3]=23;
                     for(int k=0;k<34;k++)
                     {
                         Ash[3][k]=Pokemon[8][k];
                     }
                     Ash[3][3]=23;
                     Ash[4][3]=25;
                     Ash[5][3]=24;
                     Ash_Update();
                     
                     for(int k=0;k<34;k++)
                     {
                         Team_Rocket[0][k]=Pokemon[110][k];
                     }
                     Team_Rocket[0][3]=23;
                     Team_Rocket[1][3]=19;
                     for(int k=0;k<34;k++)
                     {
                         Team_Rocket[2][k]=Pokemon[24][k];
                     }
                     Team_Rocket[2][3]=25;
                     Rocket_Update();
                 }
                 else
                 {
                     if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]<7)
                     {
                         if(Ash[0][3]!=0 && Ash[0][3]<37)
                             Ash[0][3]=37;
                         for(int k=0;k<34;k++)
                         {
                             Ash[1][k]=Pokemon[6][k];
                         }
                         Ash[1][3]=36;
                         for(int k=0;k<34;k++)
                         {
                             Ash[2][k]=Pokemon[3][k];
                         }
                         Ash[2][3]=32;
                         for(int k=0;k<34;k++)
                         {
                             Ash[3][k]=Pokemon[9][k];
                         }
                         Ash[3][3]=36;
                         Ash[4][3]=38;
                         for(int k=0;k<34;k++)
                         {
                             Ash[5][k]=Pokemon[18][k];
                         }
                         Ash[5][3]=36;
                         Ash_Update();
                         
                         Team_Rocket[0][3]=30;
                         Team_Rocket[1][3]=28;
                         Team_Rocket[2][3]=30;
                         Rocket_Update();
                     }
                     else
                     {
                         if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]<8)
                         {
                             if(Ash[0][3]!=0 && Ash[0][3]<50)
                                 Ash[0][3]=50;
                             Ash[1][3]=48;
                             Ash[2][3]=44;
                             Ash[3][3]=47;
                             Ash[4][3]=45;
                             Ash[5][3]=46;
                             Ash_Update();
                             
                             Team_Rocket[0][3]=35;
                             Team_Rocket[1][3]=32;
                             Team_Rocket[2][3]=35;
                             Rocket_Update();
                         }
                         else
                         {
                             if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]==8)
                             {
                                 if(Ash[0][3]!=0 && Ash[0][3]<65)
                                     Ash[0][3]=65;
                                 Ash[1][3]=63;
                                 Ash[2][3]=60;
                                 Ash[3][3]=63;
                                 Ash[4][3]=60;
                                 Ash[5][3]=63;
                                 Ash_Update();
                                 
                                 Team_Rocket[0][3]=40;
                                 Team_Rocket[1][3]=35;
                                 Team_Rocket[2][3]=40;
                                 Rocket_Update();
                             }
                         }
                     }
                 }
             }
         }
         
         // Display the player's information.
         Display_Information();
     
         // Draw the map.
         Draw_Map();
     
         // Display the menu options.
         Display_Menu();
         
         // Prompt player for choice until a valid option is chosen.
         Menu_Choice=-1;
         Prompt_Choice();
         
         // Increase Turns by 1 and save game.
         Turns++;
         Save_Game();
         
         // Evaluate the player's choice.
         if(Menu_Choice==0)
             break;
         else
         {
             if(Menu_Choice==1 || Menu_Choice==2 || Menu_Choice==3 || Menu_Choice==4 || Menu_Choice==7)
             {
                 n=(int)ceil(100*rand()/RAND_MAX);
                 if(n<2)
                 {
                     system("cls");
                     n=(int)ceil(100*rand()/RAND_MAX);
                     if(n>30 && Status==0)
                     {
                         cout << endl << "   [You stop.  Someone is following you...]";
                         Pause();
                         cout << endl << "   JESSIE: ""Prepare for trouble!""";
                         Pause();
                         cout << endl << "   JAMES: ""Make it double!""";
                         Pause();
                         cout << endl << "   JESSIE: ""To protect the world from devastation...""";
                         Pause();
                         cout << endl << "   JAMES: ""...to unite all peoples within our nation...""";
                         Pause();
                         cout << endl << "   JESSIE: ""...to denounce the evils of truth and love...""";
                         Pause();
                         cout << endl << "   JAMES: ""...to extend our reach to the stars above!""";
                         Pause();
                         cout << endl << "   JESSIE: ""Jessie!""";
                         Pause();
                         cout << endl << "   JAMES: ""James!""";
                         Pause();
                         cout << endl << "   JESSIE: ""Team Rocket blast off at the speed of light!""";
                         Pause();
                         cout << endl << "   JAMES: ""Surrender now, or prepare to fight!""";
                         Pause();
                         cout << endl << "   MEOWTH: ""That's right!""";
                         Pause();
                         Battle(13);
                         if(Winner==1)
                         {
                             system("cls");
                             cout << endl << "   JESSIE & JAMES: ""Looks like Team Rocket's blasting off again!""";
                             Pause();
                             cout << endl << "   [Team Rocket disappears into the sky.]";
                             Pause();
                         }
                     }
                     else
                     {
                         if(Ash[0][3]!=0 || Ash[1][3]!=0)
                         {
                             if(Ash[0][3]!=0 && Status!=0)
                             {
                                 cout << endl << "   [You stop...you see Ash and challenge him to a Pokemon battle!]";
                                 Pause();
                             }
                             else
                             {
                                 cout << endl << "   [You stop.  Someone is following you...]";
                                 Pause();
                                 if(Ash[0][3]==0)
                                 {
                                     cout << endl << "   ASH: ""Hey, " << Name << "!  Give me back my Pikachu!""";
                                     Pause();
                                 }
                                 else
                                 {
                                     cout << endl << "   ASH: ""Hey, " << Name << "!  I challenge you to a Pokemon Battle!""";
                                     Pause();
                                 }
                             }
                             Battle(14);
                         }
                         else
                             Evaluate_Choice();
                     }
                 }
                 else
                     Evaluate_Choice();
             }
             else
                 Evaluate_Choice();
         }
         
         // Make sure Ditto's data is correct.
         if(Player[132][3]!=0)
         {
             Player[132][1]=Pokemon[132][1];
             Player[132][2]=Pokemon[132][2];
             Player[132][10]=Pokemon[132][10];
             Player[132][12]=Pokemon[132][12];
             for(int k=14;k<34;k++)
                 Player[132][k]=Pokemon[132][k];
         }
     }
 }
 
 // Functions
 
 void Save_Game()
 {
      ofstream Pokemon_Data;
      Pokemon_Data.open("Pokemon_Data.dat");
      Pokemon_Data << Name << endl << Status << endl << Current_Location << endl << Turns << endl;
      for(int k=0;k<8;k++)
         Pokemon_Data << Badges[k] << endl;
      for(int k=0;k<151;k++)
      {
          for(int l=0;l<34;l++)
              Pokemon_Data << Player[k][l] << endl;
      }
      for(int k=0;k<6;k++)
      {
          for(int l=0;l<34;l++)
              Pokemon_Data << Ash[k][l] << endl;
      }
      for(int k=0;k<3;k++)
      {
          for(int l=0;l<34;l++)
              Pokemon_Data << Team_Rocket[k][l] << endl;
      }
      Pokemon_Data << Dungeon << endl;
      Pokemon_Data.close();
 }
 
 void Load_Game()
 {
      ifstream Pokemon_Data;
      Pokemon_Data.open("Pokemon_Data.dat");
      Pokemon_Data >> Name;
      Pokemon_Data >> Status;
      Pokemon_Data >> Current_Location;
      Pokemon_Data >> Turns;
      for(int k=0;k<8;k++)
         Pokemon_Data >> Badges[k];
      for(int k=0;k<151;k++)
      {
          for(int l=0;l<34;l++)
              Pokemon_Data >> Player[k][l];
      }
      for(int k=0;k<6;k++)
      {
          for(int l=0;l<34;l++)
              Pokemon_Data >> Ash[k][l];
      }
      for(int k=0;k<3;k++)
      {
          for(int l=0;l<34;l++)
              Pokemon_Data >> Team_Rocket[k][l];
      }
      Pokemon_Data >> Dungeon;
      Pokemon_Data.close();
 }
 
 void New_Game()
 {
      Menu_Choice=-1;
      system("cls");
      cout << endl << "   [You enter Professor Oak's laboratory.]";
      Pause();
      cout << endl << "   PROF. OAK: ""Hello there!  Welcome to my laboratory!";
      Pause();
      cout << endl << "   My name is Professor Oak.  People call me the 'Pokemon Professor.'";
      Pause();
      cout << endl << "   This world is inhabited by creatures called Pokemon!  For some people," << endl
      << "   Pokemon are pets.  Others use them for fights.  Myself...I study Pokemon as" << endl
      << "   a profession.";
      Pause();
      cout << endl << "   First, what is your name? ";
      cout << endl << endl << "   [Enter your first name here]: ";
      cin >> Name;
      cin.ignore();
      cout << endl << "   Right!  So your name is " << Name << "!";
      Pause();
      cout << endl << "   " << Name << "!  Your very own Pokemon legend is about to unfold!  A world of dreams" << endl
      << "   and adventures with Pokemon awaits!";
      Pause();
      cout << endl << "   You'll need a few Pokemon of your own to start out with, though...";
      Pause();
      cout << endl << "   ...I know!  You can have three of my Pokemon: Charmander, Bulbasaur, and" << endl
      << "   Squirtle!";
      Pause();
      cout << endl << "   Yes, yes, I am generous, aren't I?  Just take good care of...""";
      Pause();
      cout << endl << "   [Ash bursts through the door.]";
      Pause();
      cout << endl << "   PROF. OAK: ""Ah, you remember my neighbor, Ash.  He's been your rival since" << endl
      << "   you were a baby...";
      Pause();
      cout << endl << "   So, Ash, you decided to show up after all...""";
      Pause();
      cout << endl << "   ASH: ""Professor Oak!  Where's my Pokemon?""";
      Pause();
      cout << endl << "   PROF. OAK: ""Your Pokemon?""";
      Pause();
      cout << endl << "   ASH: ""Yes, I'm ready!""";
      Pause();
      cout << endl << "   PROF. OAK: ""You look like you're ready for bed, not for Pokemon training." << endl
      << "   I hope you don't think you're going to train in your pajamas!""";
      Pause();
      cout << endl << "   ASH: ""Oh, no, Professor...I got messed up this morning, and I was a little" << endl
      << "   late, but believe me, I'm ready for a Pokemon!";
      Pause();
      cout << endl << "   I've thought about it a lot, and it took me a long time, but I finally" << endl
      << "   decided to choose...Squirtle!""";
      Pause();
      cout << endl << "   PROF. OAK: ""Already taken, by someone who was on time.""";
      Pause();
      cout << endl << "   ASH: ""Aw...I wish I hadn't overslept...but now I will choose as my Pokemon..." << endl
      << "   Bulbasaur!""";
      Pause();
      cout << endl << "   PROF. OAK: ""That one has also been taken.""";
      Pause();
      cout << endl << "   ASH: ""Well, that's no problem, because my Pokemon will be...Charmander!""";
      Pause();
      cout << endl << "   PROF. OAK: ""The early bird gets the worm...or, in this case, the Pokemon...""";
      Pause();
      cout << endl << "   ASH: ""Does that mean all the Pokemon are gone?""";
      Pause();
      cout << endl << "   PROF. OAK: ""Well, there is still one left, but I...""";
      Pause();
      cout << endl << "   ASH: ""Professor, I'll take it!""";
      Pause();
      cout << endl << "   PROF. OAK: ""I think I should warn you: there is a problem with this last one.""";
      Pause();
      cout << endl << "   ASH: ""I have to have a Pokemon!""";
      Pause();
      cout << endl << "   PROF. OAK: ""Well, in that case...""";
      Pause();
      cout << endl << "   [A Pikachu comes out of the last PokeBall.]";
      Pause();
      cout << endl << "   PROF. OAK: ""Its name is Pikachu.""";
      Pause();
      cout << endl << "   ASH: ""Oh, it's so cute!  It's the best of all!""";
      Pause();
      cout << endl << "   PROF. OAK: ""You'll see...""";
      Pause();
      cout << endl << "   ASH: ""Oh, hi, Pikachu!""";
      Pause();
      cout << endl << "   [Ash picks Pikachu up and hugs it.]";
      Pause();
      cout << endl << "   PIKACHU: ""Pika...CHU!""";
      Pause();
      cout << endl << "   [Pikachu shocks Ash.]";
      Pause();
      cout << endl << "   PROF. OAK: ""It's also known as the electric mouse...it's usually shy, but can" << endl
      << "   sometimes have an 'electrifying' personality!""";
      Pause();
      cout << endl << "   ASH: ""I see what you mean...""";
      Pause();
      cout << endl << "   PROF. OAK: ""'Shocking,' isn't it?";
      Pause();
      cout << endl << "   Actually, it seems that this particular Pikachu is more powerful than the" << endl
      << "   average Pikachu, albeit a bit more stubborn...";
      Pause();
      cout << endl << "   In any case, it's yours now!  Take good care of it!""";
      Pause();
      cout << endl << "   ASH: ""Okay...""";
      Pause();
      cout << endl << "   PROF. OAK: ""Now, you're both ready to go out on your very own Pokemon" << endl
      << "   adventure!  But before you go, there are a few things you should know...";
      Pause();
      cout << endl << "   Things have changed since I was a young man!";
      Pause();
      cout << endl << "   Back then, we could catch as many Pokemon as we wanted.";
      Pause();
      cout << endl << "   However, due to the actions of Team Rocket, Pokemon are now in danger" << endl
      << "   of extinction!";
      Pause();
      cout << endl << "   Because of this, each trainer may now only catch one of each Pokemon.";
      Pause();
      cout << endl << "   Also in my day, we could only carry six Pokemon at a time.";
      Pause();
      cout << endl << "   Now, trainers may carry all of their Pokemon with them!";
      Pause();
      cout << endl << "   There is still a strict six-Pokemon limit on battles, however; you" << endl
      << "   may only use six Pokemon during a battle.";
      Pause();
      cout << endl << "   If six of your Pokemon faint, you lose!";
      Pause();
      cout << endl << "   Your goal is to become the Pokemon League Champion by defeating the" << endl
      << "   Elite Four!";
      Pause();
      cout << endl << "   They can be found at Indigo Plateau, but in order to get there, you" << endl
      << "   must prove yourself by defeating the eight Gym Leaders of Kanto, thus" << endl
      << "   earning eight Gym Badges!";
      Pause();
      cout << endl << "   Now, off you go!  Good luck!""";
      Pause();
      cout << endl << "   ASH: ""Hey, " << Name << "!  I challenge you to a battle!""";
      Pause();
      
      // Set the player's Pokemon matrix equal to the Pokemon matrix.
      for(int k=0;k<151;k++)
      {
         for(int l=0;l<34;l++)
             Player[k][l]=Pokemon[k][l];
      }
     
      // Give the player the starting Pokemon.
      Number_Pokemon=3;
      Player[1][3]=5;
      Player[1][5]=0;
      for(int k=0;k<5;k++)
      {
          Player[1][5]+=100*pow((double)k+1,2);
      }
      Player[4][3]=5;
      Player[4][5]=0;
      for(int k=0;k<5;k++)
      {
          Player[4][5]+=100*pow((double)k+1,2);
      }
      Player[7][3]=5;
      Player[7][5]=0;
      for(int k=0;k<5;k++)
      {
          Player[7][5]+=100*pow((double)k+1,2);
      }
      Player_Update();
      for(int k=0;k<151;k++)
      {
         Player[k][9]=Player[k][8];
      }
     
      // Have the player battle Ash.
      Battle(14);
      
      // Have the player encounter Jessie & James.
      system("cls");
      cout << endl << "   [Ash leaves Professor Oak's laboratory.  After a short while, so do you.]";
      Pause();
      cout << endl << "   [You stop.  Something is rustling in the bushes...]";
      Pause();
      cout << endl << "   JESSIE: ""Prepare for trouble!""";
      Pause();
      cout << endl << "   JAMES: ""Make it double!""";
      Pause();
      cout << endl << "   [Two goons with crazy hair and a Meowth jump out of the bushes!]";
      Pause();
      cout << endl << "   JESSIE: ""To protect the world from devastation...""";
      Pause();
      cout << endl << "   JAMES: ""...to unite all peoples within our nation...""";
      Pause();
      cout << endl << "   JESSIE: ""...to denounce the evils of truth and love...""";
      Pause();
      cout << endl << "   JAMES: ""...to extend our reach to the stars above!""";
      Pause();
      cout << endl << "   JESSIE: ""Jessie!""";
      Pause();
      cout << endl << "   JAMES: ""James!""";
      Pause();
      cout << endl << "   JESSIE: ""Team Rocket blast off at the speed of light!""";
      Pause();
      cout << endl << "   JAMES: ""Surrender now, or prepare to fight!""";
      Pause();
      cout << endl << "   MEOWTH: ""That's right!""";
      Pause();
      cout << endl << "   JESSIE: ""Listen up, kid!  We represent Team Rocket - I'm sure you've"
      << endl << "   heard of us...""";
      Pause();
      cout << endl << "   JAMES: ""Yes, and we're very interested in that Pikachu you just fought.""";
      Pause();
      cout << endl << "   Apparently it's exceptionally strong for a Pikachu at its level.""";
      Pause();
      cout << endl << "   JESSIE: ""Unfortunately, all of our agents are currently occupied with other";
      cout << endl << "   matters.";
      Pause();
      cout << endl << "   So, we'd like to offer YOU a position at Team Rocket!""";
      Pause();
      cout << endl << "   MEOWTH: ""If you join us, your first mission will be to swipe that Pikachu.""";
      Pause();
      cout << endl << "   JESSIE: ""Well, what do you say?  Will you join us?""";
      cout << endl << endl;
      while(Menu_Choice<0 || Menu_Choice>1)
      {
          cout << "   [Enter 1 for 'Yes' or 0 for 'No']: ";
          cin >> Menu_Choice;
          cin.ignore();
      }
      if(Menu_Choice==1)
      {
          Status=1;
          cout << endl << "   JESSIE: ""Of course you will!  You'd be a fool not to!""";
          Pause();
          cout << endl << "   JAMES: ""As Meowth said, your first task is to steal Ash's Pikachu.";
          Pause();
          cout << endl << "   In order to accomplish this, you must defeat him in battle.""";
          Pause();
          cout << endl << "   MEOWTH: ""Also, you should know that our Boss is Giovanni, the Leader" << endl
          << "   of the Viridian City Gym.";
          Pause();
          cout << endl << "   In the unlikely event that you defeat him in a battle, you will become" << endl
          << "   the Leader of Team Rocket!""";
          Pause();
          cout << endl << "   JESSIE: ""I think that's everything...""";
          Pause();
          cout << endl << "   [Jessie, James, and Meowth take off in their hot air balloon.]";
          Pause();
          cout << endl << "   [A passing Spearow accidentally punctures the balloon.]";
          Pause();
          cout << endl << "   JESSIE & JAMES: ""Looks like Team Rocket's blasting off again!""";
          Pause();
          cout << endl << "   [Team Rocket disappears into the sky.]";
          Pause();
      }
      else
      {
          cout << endl << "   JESSIE: ""What?  We'll teach you to defy Team Rocket!""";
          Pause();
          Battle(13);
          system("cls");
          cout << endl << "   [Jessie, James, and Meowth take off in their hot air balloon.]";
          Pause();
          cout << endl << "   [A passing Spearow accidentally punctures the balloon.]";
          Pause();
          cout << endl << "   JESSIE & JAMES: ""Looks like Team Rocket's blasting off again!""";
          Pause();
          cout << endl << "   [Team Rocket disappears into the sky.]";
          Pause();
      }
 
      
 }
 
 void Player_Update()
 {
      for(int k=0;k<151;k++)
      {
          // Update the Evolution Level.
          Player[k][4]=Pokemon[k][4];
          
          // Update the Level-Up Experience.
          Player[k][6]=0;
          for(int l=0;l<Player[k][3]+1;l++)
          {
              Player[k][6]+=100*pow((double)l+1,2);
          }
          
          // Update the HP.
          Player[k][8]=Player[k][7]*Player[k][3]/10;
          
          // Update the Attack.
          Player[k][11]=Player[k][10]*Player[k][3]/10;
          
          // Update the Defense.
          Player[k][13]=Player[k][12]*Player[k][3]/10;
      }
 }
 
 void Ash_Update()
 {
      // Update the HP, Attack, and Defense for each of Ash's Pokemon.
      for(int k=0;k<6;k++)
      {
          Ash[k][8]=Ash[k][7]*Ash[k][3]/10;
          Ash[k][9]=Ash[k][8];
          Ash[k][11]=Ash[k][10]*Ash[k][3]/10;
          Ash[k][13]=Ash[k][12]*Ash[k][3]/10;
      }
 }
 
 void Rocket_Update()
 {
      // Update the HP, Attack, and Defense for each of Team Rocket's Pokemon.
      for(int k=0;k<3;k++)
      {
          Team_Rocket[k][8]=Team_Rocket[k][7]*Team_Rocket[k][3]/10;
          Team_Rocket[k][9]=Team_Rocket[k][8];
          Team_Rocket[k][11]=Team_Rocket[k][10]*Team_Rocket[k][3]/10;
          Team_Rocket[k][13]=Team_Rocket[k][12]*Team_Rocket[k][3]/10;
      }
 }
 
 void Opponent_Active_Update()
 {
      // Update the HP, Attack, and Defense for the opponent's active Pokemon.
      Opponent_Active[8]=Opponent_Active[7]*Opponent_Active[3]/10;
      Opponent_Active[11]=Opponent_Active[10]*Opponent_Active[3]/10;
      Opponent_Active[13]=Opponent_Active[12]*Opponent_Active[3]/10;
 }
 
 void Player_Active_Update()
 {
      // Update the HP, Attack, and Defense for the player's active Pokemon.
      Player_Active[4]=Pokemon[(int)Player_Active[0]][4];
      Player_Active[6]=0;
      for(int k=0;k<Player_Active[3]+1;k++)
      {
          Player_Active[6]+=100*pow((double)k+1,2);
      }
      Player_Active[8]=Player_Active[7]*Player_Active[3]/10;
      Player_Active[11]=Player_Active[10]*Player_Active[3]/10;
      Player_Active[13]=Player_Active[12]*Player_Active[3]/10;
 }
 
 void Display_Information()
 {
      // Clear the screen.
      system("cls");
      
      // Display the player's name.
      cout << endl << "   Name:   " << Name << endl;
      
      // Display the player's status.
      cout << "   Status: " << Statuses[Status] << endl << endl;
      
      // Display the player's badges.
      cout << "   Badges: ";
      for(int k=0;k<8;k++)
          cout << Badges[k] << " ";
      
      // Display the player's current location.
      cout << endl << endl << "   Current Location: " << Location_Names[Current_Location-1] << endl << endl;
 }
 
 void Draw_Map()
 {
      //Draw the map.
      if(Current_Location==43)
          cout << "                                         (*)" << endl;
      else
          cout << "                                         ( )" << endl;
      cout << "                                          |" << endl;
      if(Current_Location==42)
          cout << "        [*]      [ ]---( )---( )---( )---[ ]---( )---( )" << endl;
      else
      {
          if(Current_Location==6)
              cout << "        [ ]      [*]---( )---( )---( )---[ ]---( )---( )" << endl;
          else
          {
              if(Current_Location==7)
                 cout << "        [ ]      [ ]---(*)---( )---( )---[ ]---( )---( )" << endl;
              else
              {
                  if(Current_Location==8)
                      cout << "        [ ]      [ ]---( )---(*)---( )---[ ]---( )---( )" << endl;
                  else
                  {
                      if(Current_Location==9)
                         cout << "        [ ]      [ ]---( )---( )---(*)---[ ]---( )---( )" << endl;
                      else
                      {
                          if(Current_Location==10)
                              cout << "        [ ]      [ ]---( )---( )---( )---[*]---( )---( )" << endl;
                          else
                          {
                              if(Current_Location==17)
                                  cout << "        [ ]      [ ]---( )---( )---( )---[ ]---(*)---( )" << endl;
                              else
                              {
                                  if(Current_Location==18)
                                      cout << "        [ ]      [ ]---( )---( )---( )---[ ]---( )---(*)" << endl;
                                  else
                                      cout << "        [ ]      [ ]---( )---( )---( )---[ ]---( )---( )" << endl;
                              }
                          }
                      }
                  }
              }
          }
      }
      cout << "         |        |                       |           |" << endl;
      if(Current_Location==41)
          cout << "        (*)      ( )                     ( )         ( )---( )" << endl;
      else
      {
          if(Current_Location==5)
              cout << "        ( )      (*)                     ( )         ( )---( )" << endl;
          else
          {
              if(Current_Location==11)
                  cout << "        ( )      ( )                     (*)         ( )---( )" << endl;
              else
              {
                  if(Current_Location==19)
                      cout << "        ( )      ( )                     ( )         (*)---( )" << endl;
                  else
                  {
                      if(Current_Location==20)
                          cout << "        ( )      ( )                     ( )         ( )---(*)" << endl;
                      else
                          cout << "        ( )      ( )                     ( )         ( )---( )" << endl;
                  }
              }
          }
      }
      cout << "         |        |                       |           |" << endl;
      if(Current_Location==40)
          cout << "        (*)      ( )   ( )---[ ]---( )---[ ]---( )---[ ]" << endl;
      else
      {
          if(Current_Location==4)
              cout << "        ( )      (*)   ( )---[ ]---( )---[ ]---( )---[ ]" << endl;
          else
          {
              if(Current_Location==26)
                  cout << "        ( )      ( )   (*)---[ ]---( )---[ ]---( )---[ ]" << endl;
              else
              {
                  if(Current_Location==25)
                      cout << "        ( )      ( )   ( )---[*]---( )---[ ]---( )---[ ]" << endl;
                  else
                  {
                      if(Current_Location==24)
                          cout << "        ( )      ( )   ( )---[ ]---(*)---[ ]---( )---[ ]" << endl;
                      else
                      {
                          if(Current_Location==12)
                              cout << "        ( )      ( )   ( )---[ ]---( )---[*]---( )---[ ]" << endl;
                          else
                          {
                              if(Current_Location==23)
                                  cout << "        ( )      ( )   ( )---[ ]---( )---[ ]---(*)---[ ]" << endl;
                              else
                              {
                                  if(Current_Location==21)
                                      cout << "        ( )      ( )   ( )---[ ]---( )---[ ]---( )---[*]" << endl;
                                  else
                                      cout << "        ( )      ( )   ( )---[ ]---( )---[ ]---( )---[ ]" << endl;
                              }
                          }
                      }
                  }
              }
          }
      }
      cout << "         |        |     |                 |           |" << endl;
      if(Current_Location==39)
          cout << "         --(*)---[ ]    |                ( )   ( )   ( )" << endl;
      else
      {
          if(Current_Location==3)
              cout << "         --( )---[*]    |                ( )   ( )   ( )" << endl;
          else
          {
              if(Current_Location==13)
                  cout << "         --( )---[ ]    |                (*)   ( )   ( )" << endl;
              else
              {
                  if(Current_Location==16)
                      cout << "         --( )---[ ]    |                ( )   (*)   ( )" << endl;
                  else
                  {
                      if(Current_Location==22)
                          cout << "         --( )---[ ]    |                ( )   ( )   (*)" << endl;
                      else
                          cout << "         --( )---[ ]    |                ( )   ( )   ( )" << endl;
                  }
              }
          }
      }
      cout << "                  |     |                 |     |     |" << endl;
      if(Current_Location==2)
          cout << "                 (*)   ( )               [ ]---( )---( )" << endl;
      else
      {
          if(Current_Location==27)
              cout << "                 ( )   (*)               [ ]---( )---( )" << endl;
          else
          {
              if(Current_Location==14)
                  cout << "                 ( )   ( )               [*]---( )---( )" << endl;
              else
              {
                  if(Current_Location==15)
                      cout << "                 ( )   ( )               [ ]---(*)---( )" << endl;
                  else
                  {
                      if(Current_Location==29)
                          cout << "                 ( )   ( )               [ ]---( )---(*)" << endl;
                      else
                          cout << "                 ( )   ( )               [ ]---( )---( )" << endl;
                  }
              }
          }
      }
      cout << "                  |     |                             |" << endl;
      if(Current_Location==1)
          cout << "                 [*]    |                             |" << endl;
      else
          cout << "                 [ ]    |                             |" << endl;
      cout << "                  :     |                             |" << endl;
      if(Current_Location==33)
          cout << "                  :     |            (*)              |" << endl;
      else
          cout << "                  :     |            ( )              |" << endl;
      cout << "                  :     |             |               |" << endl;
      if(Current_Location==28)
          cout << "                  :     -----(*)-----[ ]-----( )-----( )" << endl;
      else
      {
          if(Current_Location==32)
              cout << "                  :     -----( )-----[*]-----( )-----( )" << endl;
          else
          {
              if(Current_Location==31)
                  cout << "                  :     -----( )-----[ ]-----(*)-----( )" << endl;
              else
              {
                  if(Current_Location==30)
                      cout << "                  :     -----( )-----[ ]-----( )-----(*)" << endl;
                  else
                      cout << "                  :     -----( )-----[ ]-----( )-----( )" << endl;
              }
          }
      }
      cout << "                  :                   :" << endl;
      if(Current_Location==38)
          cout << "                 (*)                  :" << endl;
      else
          cout << "                 ( )                  :" << endl;
      cout << "                  :                   :" << endl;
      if(Current_Location==34)
          cout << "                  :                  (*)" << endl;
      else
          cout << "                  :                  ( )" << endl;
      cout << "                  :                   :" << endl;
      cout << "                  :                   :" << endl;
      if(Current_Location==37)
          cout << "                 [*].....( )...( )....." << endl << endl;
      else
      {
          if(Current_Location==36)
              cout << "                 [ ].....(*)...( )....." << endl << endl;
          else
          {
              if(Current_Location==35)
                  cout << "                 [ ].....( )...(*)....." << endl << endl;
              else
                  cout << "                 [ ].....( )...( )....." << endl << endl;
          }
      }
 }
 
 void Display_Menu()
 {
     // Display the menu.
     cout << "   What would you like to do?" << endl;
     cout << "       0: Exit Game." << endl;
     cout << "       1: Head North." << endl;
     cout << "       2: Head South." << endl;
     cout << "       3: Head West." << endl;
     cout << "       4: Head East." << endl;
     cout << "       5: View available Pokemon." << endl;
     cout << "       6: Heal Pokemon at the local Pokemon Center." << endl;
     cout << "       7: Look for wild Pokemon." << endl;
     cout << "       8: Challenge the local Gym Leader." << endl;
     if(Fly==1)
         cout << "       9: Fly to a city." << endl;
     if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]==8)
         cout << "       10: Challenge the Elite Four!" << endl;
 }
 
 void Prompt_Choice()
 {
      // Prompt the player for Menu_Choice until a valid option is chosen.
      cout << endl;
      while(Menu_Choice<0 || Menu_Choice>10 || Options[abs(Menu_Choice-1)]==0 || (Menu_Choice>0 && Menu_Choice<5 && Locations[Current_Location-1][Menu_Choice-1]==0))
      {
          cout << "   [Enter the number of your choice here]: ";
          cin >> Menu_Choice;
          cin.ignore();
          
          // Display appropriate comment.
          if(Menu_Choice>0 && Menu_Choice<5 && (Locations[Current_Location-1][Menu_Choice-1]==34 || Locations[Current_Location-1][Menu_Choice-1]==36 || Locations[Current_Location-1][Menu_Choice-1]==38)  && Surf==0)
          {
              Menu_Choice=-1;
              cout << endl << "   [One of your Pokemon must know Surf for you to go there!]";
              Pause();
              cout << endl;
          }
          else
          {
              if(Menu_Choice>0 && Menu_Choice<5 && Locations[Current_Location-1][Menu_Choice-1]==40 && Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]<8)
              {
                  Menu_Choice=-1;
                  cout << endl << "   [You must have all eight badges to go there!]";
                  Pause();
                  cout << endl;
              }
              else
              {
                  if(Menu_Choice>0 && Menu_Choice<5 && Locations[Current_Location-1][Menu_Choice-1]==43 && Dungeon==0)
                  {
                      Menu_Choice=-1;
                      cout << endl << "   [You must be the Pokemon League Champion to go there!]";
                      Pause();
                      cout << endl;
                  }
              }
          }
      }
  }
 
 void Evaluate_Choice()
 {
      // Declare local variables.
      int n;
      
      // If the player has chosen to move, head in the appropriate direction.
      if(Menu_Choice>0 && Menu_Choice<5)
          Current_Location=Locations[Current_Location-1][Menu_Choice-1];
      else
      {    
      // If the player has chosen to view available Pokemon, count and display them.
      if(Menu_Choice==5)
      {
          Number_Pokemon=0;
          for(int k=0;k<151;k++)
          {
              if(Player[k][9]!=0)
                  Number_Pokemon++;
          }
          cout << endl << "   You have " << Number_Pokemon << " available Pokemon:" << endl;
          for(int k=0;k<151;k++)
          {
              if(Player[k][9]!=0)
                  cout << "       #" << Player[k][0] << " " << Pokemon_Names[k] << " " << "Lvl " << Player[k][3] << endl;
          }
          cout << endl << "   [Press Enter when finished viewing Pokemon.]";
          Pause();
      }
      else
      {
      // If the player has chosen to heal Pokemon...
      if(Menu_Choice==6)
      {
          if(Current_Location==42 || Current_Location==1 || Current_Location==3 || Current_Location==6 || Current_Location==10 || Current_Location==12 || Current_Location==14 || Current_Location==21 || Current_Location==25 || Current_Location==32 || Current_Location==37)
          {
              for(int k=0;k<151;k++)
              {
                  Player[k][9]=Player[k][8];
              }
              
              cout << endl << "   [Your Pokemon have been completely healed.]";
              Pause();
          }
          else
          {
              cout << endl << "   [There doesn't seem to be a Pokemon Center nearby...]";
              Pause();
          }
      }
      else
      {
      // If the player has chosen to look for wild Pokemon, determine whether a Pokemon attacks, and if so, engage it in battle.
      if(Menu_Choice==7)
      {
          n=(int)ceil(99*rand()/RAND_MAX)+1;
          if(n<=Locations[Current_Location-1][4])
              Battle(15);
          else
          {
              cout << endl << "   [Couldn't find any wild Pokemon...]";
              Pause();
          }
      }
      else
      {
      // If the player has chosen to challenge the local Gym Leader...
      if(Menu_Choice==8)
      {
          if(Current_Location==3)
          {
              system("cls");
              cout << endl << "   [You enter the Viridian City Gym.]";
              Pause();
              cout << endl << "   GIOVANNI: ""Fwahahaha! You wish to challenge me?";
              Pause();
              cout << endl << "   So be it! I won't hold back!";
              Pause();
              cout << endl << "   Now, you shall face Giovanni, the greatest trainer!""";
              Pause();
              Battle(8);
              if(Winner==1)
              {
                  if(Badges[7]==0)
                  {
                      Badges[7]=1;
                      system("cls");
                      cout << endl << "   GIOVANNI: ""Ha! That was a truly intense fight!";
                      Pause();
                      cout << endl << "   You have won! As proof, here is the Earth Badge!""";
                      Pause();
                      cout << endl << "   [You received the Earth Badge from Giovanni!]";
                      Pause();
                  }
                  if(Status==1)
                  {
                      Status=2;
                      cout << endl << "   [You are now the leader of Team Rocket!]";
                      Pause();
                  }
              }
              else
              {
                  if(Winner==0 && Status==2)
                  {
                      Status=1;
                      cout << endl << "   [You got demoted back to Rocket Grunt!]";
                      Pause();
                  }
              }
          }
          else
          {
              if(Current_Location==6)
              {
                 system("cls");
                 cout << endl << "   [You enter the Pewter City Gym.]";
                 Pause();
                 cout << endl << "   BROCK: ""I'm Brock! I'm Pewter City's Gym Leader!";
                 Pause();
                 cout << endl << "   I believe in rock hard defense and determination!";
                 Pause();
                 cout << endl << "   That's why my Pokemon are all the Rock-type!";
                 Pause();
                 cout << endl << "   Do you still want to challenge me?";
                 Pause();
                 cout << endl << "   Fine then! Show me your best!""";
                 Pause();
                 Battle(1);
                 if(Winner==1 && Badges[0]==0)
                 {
                     Badges[0]=1;
                     system("cls");
                     cout << endl << "   BROCK: ""I took you for granted. As proof of your victory, here's the"
                     << endl << "   Boulder Badge!""";
                     Pause();
                     cout << endl << "   [You received the Boulder Badge from Brock!]";
                     Pause(); 
                 }
              }
              else
              {
                  if(Current_Location==10)
                  {
                      system("cls");
                      cout << endl << "   [You enter the Cerulean City Gym.]";
                      Pause();
                      cout << endl << "   MISTY: ""Hi, you're a new face!";
                      Pause();
                      cout << endl << "   Trainers who want to turn pro have to have a policy about Pokemon!";
                      Pause();
                      cout << endl << "   What is your approach when you catch Pokemon?";
                      Pause();
                      cout << endl << "   My policy is an all-out offensive with water-type Pokemon!""";
                      Pause();
                      Battle(2);
                      if(Winner==1 && Badges[1]==0)
                      {
                          Badges[1]=1;
                          system("cls");
                          cout << endl << "   MISTY: ""Wow! You're too much!";
                          Pause();
                          cout << endl << "   All right! You can have the Cascade Badge to show you beat me!""";
                          Pause();
                          cout << endl << "   [You received the Cascade Badge from Misty!]";
                          Pause();
                      }
                  }
                  else
                  {
                      if(Current_Location==12)
                      {
                          system("cls");
                          cout << endl << "   [You enter the Saffron City Gym.]";
                          Pause();
                          cout << endl << "   SABRINA: ""I had a vision of your arrival!";
                          Pause();
                          cout << endl << "   I have had psychic powers since I was a little child.";
                          Pause();
                          cout << endl << "   I first learned to bend spoons with my mind.";
                          Pause();
                          cout << endl << "   I dislike fighting, but if you wish, I will show you my powers!""";
                          Pause();
                          Battle(6);
                          if(Winner==1 && Badges[5]==0)
                          {
                              Badges[5]=1;
                              system("cls");
                              cout << endl << "   SABRINA: ""I'm shocked! But a loss is a loss.";
                              Pause();
                              cout << endl << "   I admit I didn't work hard enough to win. You earned the Marsh Badge.""";
                              Pause();
                              cout << endl << "   [You received the Marsh Badge from Sabrina!]";
                              Pause();
                          }
                      }
                      else
                      {
                          if(Current_Location==14)
                          {
                             system("cls");
                             cout << endl << "   [You enter the Vermillion City Gym.]";
                             Pause();
                             cout << endl << "   LT. SURGE: ""Hey, kid! What do you think you're doing here?";
                             Pause();
                             cout << endl << "   You won't live long in combat! That's for sure!";
                             Pause();
                             cout << endl << "   I tell you kid, electric Pokemon saved me during the war!";
                             Pause();
                             cout << endl << "   They zapped my enemies into paralysis! The same as I'll do to you!""";
                             Pause();
                             Battle(3);
                             if(Winner==1 && Badges[2]==0)
                             {
                                 Badges[2]=1;
                                 system("cls");
                                 cout << endl << "   LT. SURGE: ""Whoa! You're the real deal, kid! Fine then, take the"
                                 << endl << "   Thunder Badge!""";
                                 Pause();
                                 cout << endl << "   [You received the Thunder Badge from Lt. Surge!]";
                                 Pause();
                             }
                          }
                          else
                          {
                              if(Current_Location==25)
                              {
                                  system("cls");
                                  cout << endl << "   [You enter the Celadon City Gym.]";
                                  Pause();
                                  cout << endl << "   ERIKA: ""Hello. Lovely weather isn't it? It's so pleasant.";
                                  Pause();
                                  cout << endl << "   ...Oh dear... I must have dozed off.";
                                  Pause();
                                  cout << endl << "   Welcome. My name is Erika. I am the Leader of Celadon Gym.";
                                  Pause();
                                  cout << endl << "   I teach the art of flower arranging. My Pokemon are of the Grass-type.";
                                  Pause();
                                  cout << endl << "   Oh, I'm sorry, I had no idea that you wished to challenge me.";
                                  Pause();
                                  cout << endl << "   Very well, but I shall not lose.""";
                                  Pause();
                                  Battle(4);
                                  if(Winner==1 && Badges[3]==0)
                                  {
                                      Badges[3]=1;
                                      system("cls");
                                      cout << endl << "   ERIKA: ""Oh! I concede defeat.";
                                      Pause();
                                      cout << endl << "   You are remarkably strong. I must confer upon you the Rainbow Badge.""";
                                      Pause();
                                      cout << endl << "   [You received the Rainbow Badge from Erika!]";
                                      Pause();
                                  }
                              }
                              else
                              {
                                  if(Current_Location==32)
                                  {
                                      system("cls");
                                      cout << endl << "   [You enter the Fuchsia City Gym.]";
                                      Pause();
                                      cout << endl << "   KOGA: ""Fwahahaha!";
                                      Pause();
                                      cout << endl << "   A mere child like you dares to challenge me?";
                                      Pause();
                                      cout << endl << "   Very well, I shall show you true terror as a ninja master!";
                                      Pause();
                                      cout << endl << "   You shall feel the despair of poison techniques!""";
                                      Pause();
                                      Battle(5);
                                      if(Winner==1 && Badges[4]==0)
                                      {
                                          Badges[4]=1;
                                          system("cls");
                                          cout << endl << "   KOGA: ""Humph! You have proven your worth! Here, take the Soul Badge!""";
                                          Pause();
                                          cout << endl << "   [You received the Soul Badge from Koga!]";
                                          Pause();
                                      }
                                  }
                                  else
                                  {
                                      if(Current_Location==37)
                                      {
                                          system("cls");
                                          cout << endl << "   [You enter the Cinnabar Island Gym.]";
                                          Pause();
                                          cout << endl << "   BLAINE: ""Hah! I'm Blaine! I am the Leader of Cinnabar gym!";
                                          Pause();
                                          cout << endl << "   My fiery Pokemon will incinerate all challengers! Hah!""";
                                          Pause();
                                          Battle(7);
                                          if(Winner==1 && Badges[6]==0)
                                          {
                                              Badges[6]=1;
                                              system("cls");
                                              cout << endl << "   BLAINE: ""I've burned out! You have earned the Volcano badge!""";
                                              Pause();
                                              cout << endl << "   [You received the Volcano Badge from Blaine!]";
                                              Pause();
                                          }
                                      }
                                      else
                                          cout << endl << "   [There doesn't seem to be a gym near here...]" << endl;
                                          Pause();
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      else
      {
      // If the player has chosen to fly to a city...
      if(Menu_Choice==9)
      {
          cout << endl << "   Where would you like to fly?" << endl
          << "       1: Pallet Town" << endl
          << "       2: Viridian City" << endl
          << "       3: Pewter City" << endl
          << "       4: Cerulean City" << endl
          << "       5: Vermillion City" << endl
          << "       6: Celadon City" << endl
          << "       7: Lavender Town" << endl
          << "       8: Fuchsia City" << endl
          << "       9: Saffron City" << endl
          << "       10: Cinnabar Island" << endl
          << endl << "   [Enter the number of your choice here]: ";
          cin >> Menu_Choice;
          cin.ignore();
          if(Menu_Choice==1)
              Current_Location=1;
          else
          {
              if(Menu_Choice==2)
                  Current_Location=3;
              else
              {
                  if(Menu_Choice==3)
                      Current_Location=6;
                  else
                  {
                      if(Menu_Choice==4)
                          Current_Location=10;
                      else
                      {
                          if(Menu_Choice==5)
                              Current_Location=14;
                          else
                          {
                              if(Menu_Choice==6)
                                  Current_Location=25;
                              else
                              {
                                  if(Menu_Choice==7)
                                      Current_Location=21;
                                  else
                                  {
                                      if(Menu_Choice==8)
                                          Current_Location=32;
                                      else
                                      {
                                          if(Menu_Choice==9)
                                              Current_Location=12;
                                          else
                                          {
                                              if(Menu_Choice==10)
                                                  Current_Location=37;
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      else
      {
      // If the player has chosen to battle the Elite Four...
      if(Menu_Choice==10)
      {
          if(Current_Location==42)
          {
              system("cls");
              cout << endl << "   [You enter a room with icy floors...]";
              Pause();
              cout << endl << "   LORELEI: ""Welcome to Pokemon League!";
              Pause();
              cout << endl << "   I am Lorelei of the Elite Four!";
              Pause();
              cout << endl << "   No one can best me when it comes to icy Pokemon!";
              Pause();
              cout << endl << "   Freezing moves are powerful!";
              Pause();
              cout << endl << "   Your Pokemon will be at my mercy when they are frozen solid!";
              Pause();
              cout << endl << "   Hahaha! Are you ready?""";
              Pause();
              Battle(9);
              if(Winner==1)
              {
                  system("cls");
                  cout << endl << "   LORELEI: ""How dare you!";
                  Pause();
                  cout << endl << "   You're better than I thought!";
                  Pause();
                  cout << endl << "   Go on ahead! You only got a taste of Pokemon League power!""";
                  Pause();
                  system("cls");
                  cout << endl << "   [You enter a room with boulders everywhere...]";
                  Pause();
                  cout << endl << "   BRUNO: ""I am Bruno of the Elite Four!";
                  Pause();
                  cout << endl << "   Through rigorous training, people and Pokemon can become stronger.";
                  Pause();
                  cout << endl << "   I've weight trained with my Pokemon!";
                  Pause();
                  cout << endl << "   " << Name << "!";
                  Pause();
                  cout << endl << "   We will grind you down with our superior power! Hoo hah!""";
                  Pause();
                  Battle(10);
                  if(Winner==1)
                  {
                      system("cls");
                      cout << endl << "   BRUNO: ""Why? How could I lose?";
                      Pause();
                      cout << endl << "   My job is done. Go face your next challenge.""";
                      Pause();
                      system("cls");
                      cout << endl << "   [You enter a room with tombstones everywhere...]";
                      Pause();
                      cout << endl << "   AGATHA: ""I am Agatha of the Elite Four.";
                      Pause();
                      cout << endl << "   I hear Oak's taken a lot of interest in you, child.";
                      Pause();
                      cout << endl << "   That old duff was once tough and handsome.";
                      Pause();
                      cout << endl << "   But that was decades ago.";
                      Pause();
                      cout << endl << "   He's wrong. Pokemon are for fighting!";
                      Pause();
                      cout << endl << "   " << Name << "!";
                      Pause();
                      cout << endl << "   I'll show you how a real trainer fights!""";
                      Pause();
                      Battle(11);
                      if(Winner==1)
                      {
                          system("cls");
                          cout << endl << "   AGATHA: ""Oh, my! You're something special, child!";
                          Pause();
                          cout << endl << "   You win! I see what the old duff sees in you now.";
                          Pause();
                          cout << endl << "   I've nothing else to say. Run along now, child!";
                          Pause();
                          system("cls");
                          cout << endl << "   [You pass through a long hallway, and enter a room with dragon statues"
                          << endl << "   everywhere]";
                          Pause();
                          cout << endl << "   LANCE: ""Ah! I heard about you, " << Name << "!";
                          Pause();
                          cout << endl << "   I lead the Elite Four!  You can call me Lance, the dragon trainer!";
                          Pause();
                          cout << endl << "   You know that dragons are mythical Pokemon!";
                          Pause();
                          cout << endl << "   They're hard to catch and raise, but their powers are superior!";
                          Pause();
                          cout << endl << "   They're virtually indestructable!";
                          Pause();
                          cout << endl << "   Well, are you ready to lose?";
                          Pause();
                          cout << endl << "   Your League challenge ends with me, " << Name << "!""";
                          Pause();
                          Battle(12);
                          if(Winner==1)
                          {
                              system("cls");
                              cout << endl << "   LANCE: ""That's it!";
                              Pause();
                              cout << endl << "   I hate to admit it, but you are a Pokemon master!";
                              Pause();
                              cout << endl << "   I still can't believe my dragons lost to you, " << Name << "!";
                              Pause();
                              cout << endl << "   You are now the Pokemon League Champion!";
                              Pause();
                              cout << endl << "   ...Or, you would have been, but you have one more challenge ahead.";
                              Pause();
                              cout << endl << "   You have to face another trainer!";
                              Pause();
                              cout << endl << "   His name is...";
                              Pause();
                              cout << endl << "   Ash!";
                              Pause();
                              cout << endl << "   He beat the Elite Four before you!";
                              Pause();
                              cout << endl << "   He is the real Pokemon League Champion!""";
                              Pause();
                              system("cls");
                              cout << endl << "   [You enter one last room...]";
                              Pause();
                              cout << endl << "   ASH: ""Hey!  I was looking forward to seeing you, " << Name << "!";
                              Pause();
                              cout << endl << "   My rival should be strong to keep me sharp!";
                              Pause();
                              cout << endl << "   I've looked all over for powerful Pokemon!";
                              Pause();
                              cout << endl << "   Not only that, I assembled teams that would beat any Pokemon type!";
                              Pause();
                              cout << endl << "   And now, I'm the Pokemon League Champion!";
                              Pause();
                              cout << endl << "   " << Name << ", do you know what that means?";
                              Pause();
                              cout << endl << "   I'll tell you!";
                              Pause();
                              cout << endl << "   I am the most powerful trainer in the world!""";
                              Pause();
                              if(Ash[0][3]==0)
                              {
                                  cout << endl << "   Now I will take back my Pikachu!";
                                  Pause();
                              }
                              Battle(14);
                              if(Winner==1)
                              {
                                  system("cls");
                                  cout << endl << "   ASH: ""No! That can't be! You beat my best!";
                                  Pause();
                                  cout << endl << "   After all that work to become League champ?";
                                  Pause();
                                  cout << endl << "   My reign is over already?  It's not fair!";
                                  Pause();
                                  cout << endl << "   Why? Why did I lose?";
                                  Pause();
                                  cout << endl << "   I never made any mistakes raising my Pokemon...";
                                  Pause();
                                  cout << endl << "   Darn it! You're the new Pokemon League Champion...";
                                  Pause();
                                  cout << endl << "   ...although I don't like to admit it.""";
                                  Pause();
                                  if(Ash[0][3]==0)
                                  {
                                      cout << endl << "   I will defeat you some day, though!";
                                      Pause();
                                      cout << endl << "   And when I do, I will take back my Pikachu!";
                                      Pause();
                                  }
                                  cout << endl << "   PROF. OAK: """ << Name << "!""";
                                  Pause();
                                  cout << endl << "   [Professor Oak enters the room.]";
                                  Pause();
                                  cout << endl << "   So, you won!  Congratulations!";
                                  Pause();
                                  cout << endl << "   You're the new Pokemon League Champion!";
                                  Pause();
                                  cout << endl << "   You've grown up so much since you first left with Charmander,"
                                  << endl << "   Bulbasaur, and Squirtle!";
                                  Pause();
                                  cout << endl << "   " << Name << ", you have come of age!";
                                  Pause();
                                  cout << endl << "   Ash, I'm disappointed!";
                                  Pause();
                                  cout << endl << "   I came when I heard you beat the Elite Four!";
                                  Pause();
                                  cout << endl << "   But, when I got here, you had already lost!";
                                  Pause();
                                  cout << endl << "   Ash, do you understand why you lost?";
                                  Pause();
                                  cout << endl << "   It's because you were late the day I gave you your Pikachu!";
                                  Pause();
                                  cout << endl << "   " << Name << ", you understand that your victory was not just your"
                                  << endl << "   own doing!";
                                  Pause();
                                  cout << endl << "   Well, actually, I guess it was...";
                                  Pause();
                                  cout << endl << "   Congratulations!  You are the Pokemon League Champion!";
                                  Pause();
                                  system("cls");
                                  cout << endl << "                               CREDITS:";
                                  cout << endl << endl << "   ['Pokemon' and all related titles, characters, and logos are the property"
                                  << endl << "   of The Pokemon Company, Nintendo, Game Freak, and Creatures, Inc.]";
                                  Pause();
                                  Dungeon=1;
                              }
                              else
                              {
                                  if(Dungeon==1)
                                  {
                                      Dungeon=0;
                                      system("cls");
                                      cout << endl << "   [You are no longer the Pokemon League Champion!]";
                                      Pause();
                                  }
                              }
                          }
                      }
                  }
              }
          }
          else
          {
              cout << endl << "   [You must travel to Indigo Plateau to face the Elite Four!]";
              Pause();
          }
      }
      }
      }
      }
      }
      }
      }
 }
 
 void Battle(int opponent)
 {
     // Determine how many Pokemon the player may use.
     // Count healthy Pokemon.
     Number_Pokemon=0;
     for(int k=0;k<151;k++)
     {
         if(Player[k][9]!=0)
             Number_Pokemon++;
     }
     if(Number_Pokemon<6)
         player_count=Number_Pokemon;
     else
         player_count=6;
         
     // Determine how many Pokemon the computer player may use.
     if(opponent==1 || opponent==2 || opponent==3 || opponent==4 || opponent==5 || opponent==6 || opponent==7 || opponent==8)
         opponent_count=6;
     else
     {
         if(opponent==9 || opponent==10 || opponent==11 || opponent==12)
             opponent_count=5;
         else
         {
             if(opponent==13)
                 opponent_count=3;
             else
             {
                 if(opponent==14)
                 {
                     opponent_count=0;
                     for(int k=0;k<6;k++)
                     {
                         if(Ash[k][9]!=0)
                             opponent_count++;
                     }
                 }
                 else
                 {
                     if(opponent==15)
                         opponent_count=1;
                 }
             }
         }
     }
     
     // If the opponent is a wild Pokemon, determine its information.
     if(opponent==15)
     {
         // Determine its identity.
         n=(int)ceil(99*rand()/RAND_MAX)+1;
         for(int k=8;k<27;k+=2)
         {
             if(n<=Locations[Current_Location-1][k])
             {
                 for(int l=0;l<34;l++)
                     Opponent_Active[l]=Pokemon[Locations[Current_Location-1][k-1]][l];
                 break;
             }
         }
         
         // Determine its level.
         Opponent_Active[3]=ceil((Locations[Current_Location-1][6]-Locations[Current_Location-1][5])*rand()/RAND_MAX)+Locations[Current_Location-1][5]-1;
         
         // Give it experience.
         Opponent_Active[5]=0;
         for(int k=0;k<Opponent_Active[3];k++)
         {
             Opponent_Active[5]+=100*pow((double)k+1,2);
         }
         
         // Give it Level-Up experience.
         Opponent_Active[6]=0;
         for(int k=0;k<Opponent_Active[3]+1;k++)
         {
             Opponent_Active[6]+=100*pow((double)k+1,2);
         }
         
         // Update its stats.
         Opponent_Active_Update();
         
         // Give it HP.
         Opponent_Active[9]=Opponent_Active[8];
               
         // Tell the player which Pokemon has appeared for battle.
         cout << endl << "   [A wild " << Pokemon_Names[(int)Opponent_Active[0]] << " appeared!]";
         Pause();
     }
     else
     {
         // Tell the player whom he or she is battling.
         cout << endl << "   [" << Opponent_Names[opponent-1] << " wants to battle!]";
         Pause();
         
         // Determine which Pokemon the computer player uses.
         Select_Opponent_Active(opponent);
     }
     
     // Have the player select his or her active Pokemon.
     Select_Player_Active();
                  
     // Battle until one of the combatants runs out of Pokemon.
     while(player_count>0 && opponent_count>0)
     {
         // Display the battle screen.
         Display_Battle_Screen(opponent, player_count, opponent_count);
             
         // Have the player attack.
         Player_Attack(opponent);
         
         if(player_count<=0 || opponent_count<=0)
             break;
             
         // Display the battle screen.
         Display_Battle_Screen(opponent, player_count, opponent_count);
             
         // Display comment.
         Display_Comment();
         
         // Check for fainting, etc.
         Opponent_Faint_Check(opponent);
         Player_Faint_Check();
         
         if(player_count<=0 || opponent_count<=0)
             break;
             
         // Display the battle screen.
         Display_Battle_Screen(opponent, player_count, opponent_count);
             
         // Have the opponent attack.
         Opponent_Attack();
         
         // Display the battle screen.
         Display_Battle_Screen(opponent, player_count, opponent_count);
             
         // Display comment.
         Display_Comment();
         
         // Check for fainting, etc.
         Opponent_Faint_Check(opponent);
         Player_Faint_Check();
         
         if(player_count<=0 || opponent_count<=0)
             break;   
     }
     
     Winner=-1;
     
     // Determine the winner.
     if(opponent_count==0)
     {
         Winner=1;
     }
     else
     {
         if(opponent_count>0)
         {
             Winner=0;
         }
     }
         
     // Display message.
     if(Winner==1)
     {
        cout << endl << "   [You won!]";
        Pause();
     }
     else
     {
        if(Winner==0)
        {
            cout << endl << "   [You have no Pokemon available. You lose...]";
            Pause();
        }
     }
     
     if(opponent==14 && (Status==1 || Status==2))
     {
         if(Winner==1 && Ash[0][3]!=0)
         {
             for(int k=0;k<34;k++)
             {
                 Player[0][k]=Ash[0][k];
             }
             Ash[0][3]=0;
             Ash[0][9]=0;
             Player[0][5]=0;
             for(int k=0;k<Player[0][3];k++)
             {
                 Player[0][5]+=100*pow((double)k+1,2);
             }
             Player[0][6]=0;
             for(int k=0;k<Player[0][3]+1;k++)
             {
                 Player[0][6]+=100*pow((double)k+1,2);
             }
             cout << endl << "   [You captured Ash's Pikachu!]";
             Pause();
         }
         else
         {
             if(Winner==0 && Ash[0][3]==0)
             {
                 for(int k=0;k<34;k++)
                 {
                     Ash[0][k]=Player[0][k];
                 }
                 Player[0][3]=0;
                 Player[0][8]=0;
                 Player[0][9]=0;
                 cout << endl << "   [Ash took his Pikachu back!]";
                 Pause();
             }
         }
     }
 }
      
 void Display_Battle_Screen(int opponent, int player_count, int opponent_count)
 {
      // Clear the screen.
      system("cls");
      
      if(opponent!=15)
      {
          cout << endl << "   " << Opponent_Names[opponent-1];
          cout << "                                       O ";
          if(opponent_count<2)
              cout << "X ";
          else
              cout << "O ";
          if(opponent_count<3)
              cout << "X ";
          else
              cout << "O ";
          if(opponent_count<4)
              cout << "X ";
          else
              cout << "O ";
          if(opponent_count<5)
          cout << "X ";
          else
              cout << "O ";
          if(opponent_count<6)
              cout << "X";
          else
              cout << "O";
      }
      cout << endl << "   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      
      // Display the enemy Pokemon's name.
      cout << endl << "   ";
      if(opponent==15)
          cout << "Wild ";
      cout << Pokemon_Names[(int)Opponent_Active[0]];
            
      // Display the enemy Pokemon's level.
      cout << "  Lvl " << Opponent_Active[3];
            
      // Display the enemy Pokemon's damage meter.
      cout << endl << "   HP: " << (int)ceil(Opponent_Active[9]) << "/" << (int)ceil(Opponent_Active[8]) << "  ";
      for(int k=0;k<(int)ceil((Opponent_Active[9]/Opponent_Active[8])*40);k++)
          cout << "|";
      cout << endl << endl << "   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
      
      // Display the graphics.
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      cout << endl << "";
      
      // Display the player's Pokemon's name.
      cout << endl << endl << "   " << Name;
      cout << "                                               O ";
      if(player_count<2)
          cout << "X ";
      else
          cout << "O ";
      if(player_count<3)
          cout << "X ";
      else
          cout << "O ";
      if(player_count<4)
          cout << "X ";
      else
          cout << "O ";
      if(player_count<5)
          cout << "X ";
      else
          cout << "O ";
      if(player_count<6)
          cout << "X";
      else
          cout << "O";
      cout << endl << "   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl << "   " << Pokemon_Names[(int)Player_Active[0]];
      
      // Display the player's Pokemon's level.
      cout << "  Lvl " << Player_Active[3];
      
      // Display the player's Pokemon's damage meter.
      cout << endl << "   HP: " << (int)ceil(Player_Active[9]) << "/" << (int)ceil(Player_Active[8]) << "  ";
      for(int k=0;k<(int)((Player_Active[9]/Player_Active[8])*40);k++)
          cout << "|";
      cout << endl << endl << "   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl << endl;
 }
 
 void Player_Attack(int opponent)
 {
      int n;
      double m;
      
      // Prompt player for attack.
      attack=-1;
      cout << "   Which attack would you like to use?" << endl
      << "      0: Throw a Pokeball at " << Pokemon_Names[(int)Opponent_Active[0]] << "!" << endl;
      for(int k=1;k<11;k++)
      {
          if(Player_Active[2*k+12]!=0 && Player_Active[3]>=Player_Active[2*k+13])
              cout << "      " << k << ": " << Technique_Names[(int)Player_Active[2*k+12]-1] << endl;
      }
      cout << endl;
      while(attack<0 || attack>10)
      {
          cout << "   [Enter the number of your choice here]: ";
          cin >> attack;
          cin.ignore();
          if(attack!=0 && Player_Active[3]<Player_Active[2*attack+13])
              attack=-1;
      }
      
      damage_ratio=-1;
      
      if(attack==0)
      {
          cout << endl << "   [You threw a Pokeball at " << Pokemon_Names[(int)Opponent_Active[0]] << "!]";
          Pause();
          if(opponent==15)
          {
              n=(int)ceil(100*rand()/RAND_MAX);
              if(n<=30)
              {
                  for(int l=0;l<34;l++)
                  {
                      Player[(int)Opponent_Active[0]][l]=Opponent_Active[l];
                  }
                  Player_Update();
                  cout << endl << "   [You caught " << Pokemon_Names[(int)Opponent_Active[0]] << "!]";
                  Pause();
                  opponent_count=-1;
              }
              else
              {
                  cout << endl << "   [" << Pokemon_Names[(int)Opponent_Active[0]] << " broke free!]";
                  Pause();
              }
          }
          else
          {
              cout << endl << "   [" << Pokemon_Names[(int)Opponent_Active[0]] << " evaded the Pokeball!]";
              Pause();
          }
      }
      else
      {
      // Display comment.
      cout << endl << "   [" << Pokemon_Names[(int)Player_Active[0]] << " used " << Technique_Names[(int)Player_Active[2*attack+12]-1] << "!]";
      Pause();
             
      // Calculate the damage ratio.
      damage_ratio=Types[(int)Techniques[(int)Player_Active[2*attack+12]-1][0]-1][(int)Opponent_Active[1]-1]*Types[(int)Techniques[(int)Player_Active[2*attack+12]-1][0]-1][(int)Opponent_Active[2]-1];
      if((Player_Active[0]==0 && damage_ratio<1) || Player_Active[2*attack+12]==66 || Player_Active[2*attack+12]==96 || attack==0)
          damage_ratio=1;
             
      // Calculate the damage.
      m=0.8+0.4*rand()/RAND_MAX;
      damage=m*0.5*damage_ratio*Techniques[(int)Player_Active[2*attack+12]-1][1]*pow(Player_Active[11]/Opponent_Active[13],3);
      if(damage<3 && damage_ratio>0 && Techniques[(int)Player_Active[2*attack+12]-1][1]!=0)
          damage=3;
      if(Player_Active[2*attack+12]==81 && damage_ratio!=0)
      {
          damage=20;
          damage_ratio=1;
      }
      else
      {
          if(Player_Active[2*attack+12]==54 && damage_ratio!=0)
          {
              damage=40;
              damage_ratio=1;
          }
          else
          {
              if(Player_Active[2*attack+12]==71 && damage_ratio!=0)
              {
                 damage=Player_Active[3];
                 damage_ratio=1;
              }
              else
              {
                  if(Player_Active[2*attack+12]==24 && damage_ratio!=0)
                  {
                     damage=40;
                     damage_ratio=1;
                  }
              }
          }
      }
             
      // Calculate the self-damage ratio.
      self_damage_ratio=Types[(int)Techniques[(int)Player_Active[2*attack+12]-1][0]-1][(int)Player_Active[1]-1]*Types[(int)Techniques[(int)Player_Active[2*attack+12]-1][0]-1][(int)Player_Active[2]-1];
             
      // Calculate the self-damage.
      self_damage=m*0.5*self_damage_ratio*Techniques[(int)Player_Active[2*attack+12]-1][2]*pow(Player_Active[11]/Player_Active[13],3);
      if(Player_Active[2*attack+12]==66)
          self_damage=-0.5*Player_Active[8];
      else
      {
          if(Player_Active[2*attack+12]==1 || Player_Active[2*attack+12]==48 || Player_Active[2*attack+12]==51)
              self_damage=-0.5*damage;
      }
             
      // Apply the damage.
      Opponent_Active[9]-=damage;
      Player_Active[9]-=self_damage;
      Player[(int)Player_Active[0]][9]-=self_damage;
      
      // If transform is used...
      if(Player_Active[2*attack+12]==96)
      {
          Player_Active[1]=Opponent_Active[1];
          Player_Active[2]=Opponent_Active[2];
          Player_Active[10]=Opponent_Active[10];
          Player_Active[12]=Opponent_Active[12];
          for(int k=14;k<34;k++)
          {
              Player_Active[k]=Opponent_Active[k];
          }
          cout << endl << "   [" << Pokemon_Names[(int)Player_Active[0]] << " transformed into " << Pokemon_Names[(int)Opponent_Active[0]] << "!]";
          Pause();
      }
      
      // Check HP.
      HP_Check();
      }
 }
 
 void Opponent_Attack()
 {
      double m;
      
      // Determine which attack the opponent uses.
      attack=-1;
      while(attack<0 || Opponent_Active[2*attack+12]==0 || Opponent_Active[3]<Opponent_Active[2*attack+13])
      {
          attack=(int)ceil(9*rand()/RAND_MAX)+1;
      }
      
      // Display comment.       
      cout << "   [Enemy " << Pokemon_Names[(int)Opponent_Active[0]] << " used " << Technique_Names[(int)Opponent_Active[2*attack+12]-1] << "!]";
      Pause();
             
      // Calculate the damage ratio.
      damage_ratio=Types[(int)Techniques[(int)Opponent_Active[2*attack+12]-1][0]-1][(int)Player_Active[1]-1]*Types[(int)Techniques[(int)Opponent_Active[2*attack+12]-1][0]-1][(int)Player_Active[2]-1];
      if((Opponent_Active[0]==0 && damage_ratio<1) || Opponent_Active[2*attack+12]==66 || Opponent_Active[2*attack+12]==96)
          damage_ratio=1;
             
      // Calculate the damage.
      m=0.8+0.4*rand()/RAND_MAX;
      damage=m*0.5*damage_ratio*Techniques[(int)Opponent_Active[2*attack+12]-1][1]*pow(Opponent_Active[11]/Player_Active[13],3);
      if(damage<3 && damage_ratio>0 && Techniques[(int)Opponent_Active[2*attack+12]-1][1]!=0)
          damage=3;
      if(Opponent_Active[2*attack+12]==81 && damage_ratio!=0)
      {
          damage=20;
          damage_ratio=1;
      }
      else
      {
          if(Opponent_Active[2*attack+12]==54 && damage_ratio!=0)
          {
              damage=40;
              damage_ratio=1;
          }
          else
          {
              if(Opponent_Active[2*attack+12]==71 && damage_ratio!=0)
              {
                 damage=Opponent_Active[3];
                 damage_ratio=1;
              }
              else
              {
                  if(Opponent_Active[2*attack+12]==24 && damage_ratio!=0)
                  {
                     damage=40;
                     damage_ratio=1;
                  }
              }
          }
      }
             
      // Calculate the self-damage ratio.
      self_damage_ratio=Types[(int)Techniques[(int)Opponent_Active[2*attack+12]-1][0]-1][(int)Opponent_Active[1]-1]*Types[(int)Techniques[(int)Opponent_Active[2*attack+12]-1][0]-1][(int)Opponent_Active[2]-1];
             
      // Calculate the self-damage.
      self_damage=m*0.5*self_damage_ratio*Techniques[(int)Opponent_Active[2*attack+12]-1][2]*pow(Opponent_Active[11]/Opponent_Active[13],3);
      if(Opponent_Active[2*attack+12]==66)
          self_damage=-0.5*Opponent_Active[8];
      else
      {
          if(Opponent_Active[2*attack+12]==1 || Opponent_Active[2*attack+12]==48 || Opponent_Active[2*attack+12]==51)
              self_damage=-0.5*damage;
      }
             
      // Apply the damage.
      Player_Active[9]-=damage;
      Player[(int)Player_Active[0]][9]-=damage;
      Opponent_Active[9]-=self_damage;
      
      // If transform is used...
      if(Opponent_Active[2*attack+12]==96)
      {
          Opponent_Active[1]=Player_Active[1];
          Opponent_Active[2]=Player_Active[2];
          Opponent_Active[10]=Player_Active[10];
          Opponent_Active[12]=Player_Active[12];
          for(int k=14;k<34;k++)
          {
              Opponent_Active[k]=Player_Active[k];
          }
          cout << endl << "   [Enemy " << Pokemon_Names[(int)Opponent_Active[0]] << " transformed into " << Pokemon_Names[(int)Player_Active[0]] << "!]";
          Pause();
      }
      
      // Check HP.
      HP_Check();        
 }
 
 void Select_Player_Active()
 {
     // Count healthy Pokemon.
     Number_Pokemon=0;
     for(int k=0;k<151;k++)
     {
         if(Player[k][9]!=0)
             Number_Pokemon++;
     }
     if(Number_Pokemon>0)
     {
         Player_Active[0]=-1;
         cout << endl << "   Select Pokemon:" << endl;
         for(int k=0;k<151;k++)
         {
             if(Player[k][9]!=0 && Player[k][3]!=0)
                 cout << "       #" << Player[k][0] << " " << Pokemon_Names[k] << " " << "Lvl " << Player[k][3] << endl;
         }
         while(Player_Active[0]<0 || Player_Active[0]>150 || Player[(int)Player_Active[0]][9]==0 || Player[(int)Player_Active[0]][3]==0)
         {
             cout << endl << "   [Enter the number of your choice here]: ";
             cin >> Player_Active[0];
             cin.ignore();
         }
         for(int k=0;k<34;k++)
         {
             Player_Active[k]=Player[(int)Player_Active[0]][k];
         }
     }
 }
 
 void Select_Opponent_Active(int opponent)
 {
      for(int k=0;k<34;k++)
      {
          if(opponent==1)
              Opponent_Active[k]=Brock[Indices[opponent_count-1]][k];
          else
          {
              if(opponent==2)
                  Opponent_Active[k]=Misty[Indices[opponent_count-1]][k];
              else
              {
                  if(opponent==3)
                      Opponent_Active[k]=Lt_Surge[Indices[opponent_count-1]][k];
                  else
                  {
                      if(opponent==4)
                          Opponent_Active[k]=Erika[Indices[opponent_count-1]][k];
                      else
                      {
                          if(opponent==5)
                              Opponent_Active[k]=Koga[Indices[opponent_count-1]][k];
                          else
                          {
                              if(opponent==6)
                                  Opponent_Active[k]=Sabrina[Indices[opponent_count-1]][k];
                              else
                              {
                                  if(opponent==7)
                                      Opponent_Active[k]=Blaine[Indices[opponent_count-1]][k];
                                  else
                                  {
                                      if(opponent==8)
                                          Opponent_Active[k]=Giovanni[Indices[opponent_count-1]][k];
                                      else
                                      {
                                          if(opponent==9)
                                              Opponent_Active[k]=Lorelei[Indices[opponent_count]][k];
                                          else
                                          {
                                              if(opponent==10)
                                                  Opponent_Active[k]=Bruno[Indices[opponent_count]][k];
                                              else
                                              {
                                                  if(opponent==11)
                                                      Opponent_Active[k]=Agatha[Indices[opponent_count]][k];
                                                  else
                                                  {
                                                      if(opponent==12)
                                                          Opponent_Active[k]=Lance[Indices[opponent_count]][k];
                                                      else
                                                      {
                                                          if(opponent==13)
                                                              Opponent_Active[k]=Team_Rocket[Indices[opponent_count+2]][k];
                                                          else
                                                          {
                                                              if(opponent==14)
                                                              {
                                                                  if(Ash[0][3]==5)
                                                                      Opponent_Active[k]=Ash[0][k];
                                                                  else
                                                                  {
                                                                      if(Badges[0]+Badges[1]+Badges[2]+Badges[3]+Badges[4]+Badges[5]+Badges[6]+Badges[7]==0)
                                                                          Opponent_Active[k]=Ash[Indices[opponent_count+2]][k];
                                                                      else
                                                                      {
                                                                          Opponent_Active[k]=Ash[Indices[opponent_count-1]][k];
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      
      cout << endl << "   [" << Opponent_Names[opponent-1] << " sent out " << Pokemon_Names[(int)Opponent_Active[0]] << "!]";
      Pause();
 }
 
 void Display_Comment()
 {
      if(damage_ratio>1)
      {
             cout << "   [It's super effective!]";
             Pause();
      }
      else
      {
          if(damage_ratio==0)
          {
              cout << "   [It didn't do any damage!]";
              Pause();
          }
          else
          {
              if(damage_ratio<1 && damage_ratio>0)
              {
                  cout << "   [It isn't very effective...]";
                  Pause();
              }
          }
      }
 }
 
 void Opponent_Faint_Check(int opponent)
 {
      // Declare local variables.
      double n, m;
      
      if(Opponent_Active[9]<=0)
      {
          opponent_count--;
          
          // Display comment.
          cout << endl << "   [Enemy " << Pokemon_Names[(int)Opponent_Active[0]] << " fainted!]";
          Pause();
          
          // Award experience.
          Player_Active[5]+=100*pow(Opponent_Active[3],2);
          Player[(int)Player_Active[0]][5]+=100*pow(Opponent_Active[3],2);
          
          // Check for level-up.
          
          m=Player_Active[9]/Player_Active[8];
          
          while(Player[(int)Player_Active[0]][5]>=Player[(int)Player_Active[0]][6])
          {
              Player_Active[3]++;
              Player[(int)Player_Active[0]][3]++;
              Player_Active_Update();
              Player_Update();
              Player[(int)Player_Active[0]][9]=Player[(int)Player_Active[0]][8]*m;
              Player_Active[9]=Player[(int)Player_Active[0]][9];
              cout << endl << "   [" << Pokemon_Names[(int)Player_Active[0]] << " reached level " << Player_Active[3] << "!]";
              Pause();
              
              // Check for evolution.
              if(Player_Active[3]>=Player_Active[4] && Player_Active[4]!=0)
              {
                  n=Player_Active[0];
                  Player_Active[0]=n+1;
                  Player[(int)n+1][3]=Player[(int)n][3];
                  Player[(int)n+1][5]=Player[(int)n][5];
                  Player_Active[5]=Player[(int)n+1][5];
                  Player_Update();
                  Player_Active_Update();
                  Player[(int)n+1][9]=Player[(int)n+1][8]*m;
                  Player_Active[9]=Player[(int)Player_Active[0]][9];
                  Player[(int)n][3]=0;
                  Player[(int)n][8]=0;
                  Player[(int)n][9]=0;
                  cout << endl << "   [" << Pokemon_Names[(int)Player_Active[0]-1] << " evolved into " << Pokemon_Names[(int)Player_Active[0]] << "!]";
                  Pause();
              }
          }
          
          // Have opponent select another Pokemon if it still can.
          if(opponent_count>0)
              Select_Opponent_Active(opponent);
      }
 }
 
 void Player_Faint_Check()
 {
      if(Player_Active[9]<=0)
      {
          player_count--;
          
          // Display comment.
          cout << endl << "   [" << Pokemon_Names[(int)Player_Active[0]] << " fainted!]";
          Pause();
          
          // Have player select another Pokemon if he/she still can.
          if(player_count>0)
              Select_Player_Active();
      }
 }
 
 void HP_Check()
 {
      if(Player_Active[9]>Player_Active[8])
      {
          Player_Active[9]=Player_Active[8];
          Player[(int)Player_Active[0]][9]=Player[(int)Player_Active[0]][8];
      }
      else
      {
          if(Player_Active[9]<=0)
          {
              Player_Active[9]=0;
              Player[(int)Player_Active[0]][9]=0;
          }
      }
      if(Opponent_Active[9]>Opponent_Active[8])
          Opponent_Active[9]=Opponent_Active[8];
      else
      {
          if(Opponent_Active[9]<=0)
              Opponent_Active[9]=0;
      }
 }
 
 void Pause()
 {
      getchar();
 }
